
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005070  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005200  08005200  00006200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c0  080052c0  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052c0  080052c0  000062c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c8  080052c8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c8  080052c8  000062c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052cc  080052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080052d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00012f60  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012fcc  20012fcc  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e719  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d0  00000000  00000000  000157b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00017f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb4  00000000  00000000  00018ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d48  00000000  00000000  00019a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010cc7  00000000  00000000  0003c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3536  00000000  00000000  0004d48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001209c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000456c  00000000  00000000  00120a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  00124f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051e8 	.word	0x080051e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080051e8 	.word	0x080051e8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fc03 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f855 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f8bd 	bl	8000688 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter.
  DWT_CTRL |= (1 << 0);
 800050e:	4b21      	ldr	r3, [pc, #132]	@ (8000594 <main+0x98>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a20      	ldr	r2, [pc, #128]	@ (8000594 <main+0x98>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6013      	str	r3, [r2, #0]
  //call the below API to get the logs in sysview app
//  SEGGER_SYSVIEW_Conf();
//  SEGGER_SYSVIEW_STart();


  status = xTaskCreate(task1_handler, "Task_1", 200,"Hello World from Task 1", 2, &task1_handle);
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2302      	movs	r3, #2
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <main+0x9c>)
 8000526:	22c8      	movs	r2, #200	@ 0xc8
 8000528:	491c      	ldr	r1, [pc, #112]	@ (800059c <main+0xa0>)
 800052a:	481d      	ldr	r0, [pc, #116]	@ (80005a0 <main+0xa4>)
 800052c:	f002 fbc4 	bl	8002cb8 <xTaskCreate>
 8000530:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d00b      	beq.n	8000550 <main+0x54>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800053c:	f383 8811 	msr	BASEPRI, r3
 8000540:	f3bf 8f6f 	isb	sy
 8000544:	f3bf 8f4f 	dsb	sy
 8000548:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <main+0x50>

  status = xTaskCreate(task2_handler, "Task_2", 200,"Hello World from Task 2", 2, &task2_handle);
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2302      	movs	r3, #2
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <main+0xa8>)
 800055a:	22c8      	movs	r2, #200	@ 0xc8
 800055c:	4912      	ldr	r1, [pc, #72]	@ (80005a8 <main+0xac>)
 800055e:	4813      	ldr	r0, [pc, #76]	@ (80005ac <main+0xb0>)
 8000560:	f002 fbaa 	bl	8002cb8 <xTaskCreate>
 8000564:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d00b      	beq.n	8000584 <main+0x88>
        __asm volatile
 800056c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000570:	f383 8811 	msr	BASEPRI, r3
 8000574:	f3bf 8f6f 	isb	sy
 8000578:	f3bf 8f4f 	dsb	sy
 800057c:	60fb      	str	r3, [r7, #12]
    }
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x84>

  //start FreeRTOS Scheduler
  vTaskStartScheduler(); //returns only if it has any problem
 8000584:	f002 fcde 	bl	8002f44 <vTaskStartScheduler>
  printf("End\n");
 8000588:	4809      	ldr	r0, [pc, #36]	@ (80005b0 <main+0xb4>)
 800058a:	f004 fa83 	bl	8004a94 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	bf00      	nop
 8000590:	e7fd      	b.n	800058e <main+0x92>
 8000592:	bf00      	nop
 8000594:	e0001000 	.word	0xe0001000
 8000598:	08005200 	.word	0x08005200
 800059c:	08005218 	.word	0x08005218
 80005a0:	08000945 	.word	0x08000945
 80005a4:	08005220 	.word	0x08005220
 80005a8:	08005238 	.word	0x08005238
 80005ac:	08000975 	.word	0x08000975
 80005b0:	08005240 	.word	0x08005240

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	@ 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fb46 	bl	8004c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	@ (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	@ (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000624:	2308      	movs	r3, #8
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000628:	2332      	movs	r3, #50	@ 0x32
 800062a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800062c:	2304      	movs	r3, #4
 800062e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000630:	2307      	movs	r3, #7
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fe41 	bl	80012c0 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f9c0 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000654:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f8a2 	bl	80017b0 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000672:	f000 f9a9 	bl	80009c8 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	@ 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	@ 0x30
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	4ba2      	ldr	r3, [pc, #648]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4aa1      	ldr	r2, [pc, #644]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b9f      	ldr	r3, [pc, #636]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0310 	and.w	r3, r3, #16
 80006b6:	61bb      	str	r3, [r7, #24]
 80006b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	4b9b      	ldr	r3, [pc, #620]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a9a      	ldr	r2, [pc, #616]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b98      	ldr	r3, [pc, #608]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b94      	ldr	r3, [pc, #592]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a93      	ldr	r2, [pc, #588]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b91      	ldr	r3, [pc, #580]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b8d      	ldr	r3, [pc, #564]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a8c      	ldr	r2, [pc, #560]	@ (800092c <MX_GPIO_Init+0x2a4>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b8a      	ldr	r3, [pc, #552]	@ (800092c <MX_GPIO_Init+0x2a4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b86      	ldr	r3, [pc, #536]	@ (800092c <MX_GPIO_Init+0x2a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a85      	ldr	r2, [pc, #532]	@ (800092c <MX_GPIO_Init+0x2a4>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b83      	ldr	r3, [pc, #524]	@ (800092c <MX_GPIO_Init+0x2a4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b7f      	ldr	r3, [pc, #508]	@ (800092c <MX_GPIO_Init+0x2a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a7e      	ldr	r2, [pc, #504]	@ (800092c <MX_GPIO_Init+0x2a4>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b7c      	ldr	r3, [pc, #496]	@ (800092c <MX_GPIO_Init+0x2a4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2108      	movs	r1, #8
 800074a:	4879      	ldr	r0, [pc, #484]	@ (8000930 <MX_GPIO_Init+0x2a8>)
 800074c:	f000 fd9e 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2101      	movs	r1, #1
 8000754:	4877      	ldr	r0, [pc, #476]	@ (8000934 <MX_GPIO_Init+0x2ac>)
 8000756:	f000 fd99 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800075a:	2200      	movs	r2, #0
 800075c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000760:	4875      	ldr	r0, [pc, #468]	@ (8000938 <MX_GPIO_Init+0x2b0>)
 8000762:	f000 fd93 	bl	800128c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000766:	2308      	movs	r3, #8
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	486c      	ldr	r0, [pc, #432]	@ (8000930 <MX_GPIO_Init+0x2a8>)
 800077e:	f000 fbe9 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000782:	2301      	movs	r3, #1
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4866      	ldr	r0, [pc, #408]	@ (8000934 <MX_GPIO_Init+0x2ac>)
 800079a:	f000 fbdb 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800079e:	2308      	movs	r3, #8
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ae:	2305      	movs	r3, #5
 80007b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	485e      	ldr	r0, [pc, #376]	@ (8000934 <MX_GPIO_Init+0x2ac>)
 80007ba:	f000 fbcb 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007be:	2301      	movs	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	485a      	ldr	r0, [pc, #360]	@ (800093c <MX_GPIO_Init+0x2b4>)
 80007d4:	f000 fbbe 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007d8:	2310      	movs	r3, #16
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007e8:	2306      	movs	r3, #6
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4852      	ldr	r0, [pc, #328]	@ (800093c <MX_GPIO_Init+0x2b4>)
 80007f4:	f000 fbae 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007f8:	23e0      	movs	r3, #224	@ 0xe0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000808:	2305      	movs	r3, #5
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	484a      	ldr	r0, [pc, #296]	@ (800093c <MX_GPIO_Init+0x2b4>)
 8000814:	f000 fb9e 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000818:	2304      	movs	r3, #4
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4845      	ldr	r0, [pc, #276]	@ (8000940 <MX_GPIO_Init+0x2b8>)
 800082c:	f000 fb92 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	483c      	ldr	r0, [pc, #240]	@ (8000940 <MX_GPIO_Init+0x2b8>)
 800084e:	f000 fb81 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000852:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000856:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4833      	ldr	r0, [pc, #204]	@ (8000938 <MX_GPIO_Init+0x2b0>)
 800086c:	f000 fb72 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000870:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000882:	2306      	movs	r3, #6
 8000884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4829      	ldr	r0, [pc, #164]	@ (8000934 <MX_GPIO_Init+0x2ac>)
 800088e:	f000 fb61 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000892:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4825      	ldr	r0, [pc, #148]	@ (800093c <MX_GPIO_Init+0x2b4>)
 80008a8:	f000 fb54 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008ac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008be:	230a      	movs	r3, #10
 80008c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	481c      	ldr	r0, [pc, #112]	@ (800093c <MX_GPIO_Init+0x2b4>)
 80008ca:	f000 fb43 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008ce:	2320      	movs	r3, #32
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <MX_GPIO_Init+0x2b0>)
 80008e2:	f000 fb37 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008e6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ec:	2312      	movs	r3, #18
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f8:	2304      	movs	r3, #4
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	480f      	ldr	r0, [pc, #60]	@ (8000940 <MX_GPIO_Init+0x2b8>)
 8000904:	f000 fb26 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000908:	2302      	movs	r3, #2
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_GPIO_Init+0x2a8>)
 800091e:	f000 fb19 	bl	8000f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	bf00      	nop
 8000924:	3730      	adds	r7, #48	@ 0x30
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40021000 	.word	0x40021000
 8000934:	40020800 	.word	0x40020800
 8000938:	40020c00 	.word	0x40020c00
 800093c:	40020000 	.word	0x40020000
 8000940:	40020400 	.word	0x40020400

08000944 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void * parameters ){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

	printf("Entering Infinite Loop of Task 1\n");
 800094c:	4807      	ldr	r0, [pc, #28]	@ (800096c <task1_handler+0x28>)
 800094e:	f004 f8a1 	bl	8004a94 <puts>

	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f004 f89e 	bl	8004a94 <puts>
		taskYIELD();
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <task1_handler+0x2c>)
 800095a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	f3bf 8f4f 	dsb	sy
 8000964:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 8000968:	bf00      	nop
 800096a:	e7f2      	b.n	8000952 <task1_handler+0xe>
 800096c:	08005244 	.word	0x08005244
 8000970:	e000ed04 	.word	0xe000ed04

08000974 <task2_handler>:
	}
}

static void task2_handler(void * parameters ){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

	printf("Entering Infinite Loop of Task 2\n");
 800097c:	4807      	ldr	r0, [pc, #28]	@ (800099c <task2_handler+0x28>)
 800097e:	f004 f889 	bl	8004a94 <puts>

	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f004 f886 	bl	8004a94 <puts>
		taskYIELD();
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <task2_handler+0x2c>)
 800098a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	f3bf 8f4f 	dsb	sy
 8000994:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 8000998:	bf00      	nop
 800099a:	e7f2      	b.n	8000982 <task2_handler+0xe>
 800099c:	08005268 	.word	0x08005268
 80009a0:	e000ed04 	.word	0xe000ed04

080009a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009b6:	f000 f9cb 	bl	8000d50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40001000 	.word	0x40001000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	@ 0x38
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b33      	ldr	r3, [pc, #204]	@ (8000b08 <HAL_InitTick+0xe4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3c:	4a32      	ldr	r2, [pc, #200]	@ (8000b08 <HAL_InitTick+0xe4>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a44:	4b30      	ldr	r3, [pc, #192]	@ (8000b08 <HAL_InitTick+0xe4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a50:	f107 0210 	add.w	r2, r7, #16
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f8b4 	bl	8001bc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a60:	6a3b      	ldr	r3, [r7, #32]
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d103      	bne.n	8000a72 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a6a:	f001 f899 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 8000a6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a70:	e004      	b.n	8000a7c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a72:	f001 f895 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 8000a76:	4603      	mov	r3, r0
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a7e:	4a23      	ldr	r2, [pc, #140]	@ (8000b0c <HAL_InitTick+0xe8>)
 8000a80:	fba2 2303 	umull	r2, r3, r2, r3
 8000a84:	0c9b      	lsrs	r3, r3, #18
 8000a86:	3b01      	subs	r3, #1
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <HAL_InitTick+0xec>)
 8000a8c:	4a21      	ldr	r2, [pc, #132]	@ (8000b14 <HAL_InitTick+0xf0>)
 8000a8e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <HAL_InitTick+0xec>)
 8000a92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a96:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a98:	4a1d      	ldr	r2, [pc, #116]	@ (8000b10 <HAL_InitTick+0xec>)
 8000a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a9c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <HAL_InitTick+0xec>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <HAL_InitTick+0xec>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <HAL_InitTick+0xec>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ab0:	4817      	ldr	r0, [pc, #92]	@ (8000b10 <HAL_InitTick+0xec>)
 8000ab2:	f001 f8bb 	bl	8001c2c <HAL_TIM_Base_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000abc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d11b      	bne.n	8000afc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ac4:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <HAL_InitTick+0xec>)
 8000ac6:	f001 f90b 	bl	8001ce0 <HAL_TIM_Base_Start_IT>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d111      	bne.n	8000afc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ad8:	2036      	movs	r0, #54	@ 0x36
 8000ada:	f000 fa2d 	bl	8000f38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d808      	bhi.n	8000af6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	2036      	movs	r0, #54	@ 0x36
 8000aea:	f000 fa09 	bl	8000f00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <HAL_InitTick+0xf4>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	e002      	b.n	8000afc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000afc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3738      	adds	r7, #56	@ 0x38
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	431bde83 	.word	0x431bde83
 8000b10:	20000088 	.word	0x20000088
 8000b14:	40001000 	.word	0x40001000
 8000b18:	20000004 	.word	0x20000004

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <TIM6_DAC_IRQHandler+0x10>)
 8000b5a:	f001 f931 	bl	8001dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000088 	.word	0x20000088

08000b68 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b72:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <ITM_SendChar+0x48>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb0 <ITM_SendChar+0x48>)
 8000b78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b7c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <ITM_SendChar+0x4c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <ITM_SendChar+0x4c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b8a:	bf00      	nop
 8000b8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f8      	beq.n	8000b8c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b9a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	6013      	str	r3, [r2, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000edfc 	.word	0xe000edfc
 8000bb4:	e0000e00 	.word	0xe0000e00

08000bb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e00a      	b.n	8000be0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bca:	f3af 8000 	nop.w
 8000bce:	4601      	mov	r1, r0
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf0      	blt.n	8000bca <_read+0x12>
  }

  return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	e009      	b.n	8000c18 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	60ba      	str	r2, [r7, #8]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ffab 	bl	8000b68 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dbf1      	blt.n	8000c04 <_write+0x12>
  }
  return len;
 8000c20:	687b      	ldr	r3, [r7, #4]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_close>:

int _close(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c52:	605a      	str	r2, [r3, #4]
  return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <_isatty>:

int _isatty(int file)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cbc:	f7ff ffea 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	@ (8000cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f004 f803 	bl	8004cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fc07 	bl	80004fc <main>
  bx  lr    
 8000cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cfc:	080052d0 	.word	0x080052d0
  ldr r2, =_sbss
 8000d00:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d04:	20012fcc 	.word	0x20012fcc

08000d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <HAL_Init+0x40>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_Init+0x40>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <HAL_Init+0x40>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f8d8 	bl	8000eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f7ff fe72 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fe48 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	200000d0 	.word	0x200000d0

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	200000d0 	.word	0x200000d0

08000d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	f003 0307 	and.w	r3, r3, #7
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db0b      	blt.n	8000e1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 021f 	and.w	r2, r3, #31
 8000e0c:	4907      	ldr	r1, [pc, #28]	@ (8000e2c <__NVIC_EnableIRQ+0x38>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	2001      	movs	r0, #1
 8000e16:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	@ (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	@ 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	@ 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff4c 	bl	8000d90 <__NVIC_SetPriorityGrouping>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f12:	f7ff ff61 	bl	8000dd8 <__NVIC_GetPriorityGrouping>
 8000f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	68b9      	ldr	r1, [r7, #8]
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	f7ff ffb1 	bl	8000e84 <NVIC_EncodePriority>
 8000f22:	4602      	mov	r2, r0
 8000f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff80 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff54 	bl	8000df4 <__NVIC_EnableIRQ>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	@ 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e16b      	b.n	8001248 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 815a 	bne.w	8001242 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80b4 	beq.w	8001242 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b60      	ldr	r3, [pc, #384]	@ (8001260 <HAL_GPIO_Init+0x30c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001260 <HAL_GPIO_Init+0x30c>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001260 <HAL_GPIO_Init+0x30c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001264 <HAL_GPIO_Init+0x310>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a52      	ldr	r2, [pc, #328]	@ (8001268 <HAL_GPIO_Init+0x314>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d02b      	beq.n	800117a <HAL_GPIO_Init+0x226>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a51      	ldr	r2, [pc, #324]	@ (800126c <HAL_GPIO_Init+0x318>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d025      	beq.n	8001176 <HAL_GPIO_Init+0x222>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a50      	ldr	r2, [pc, #320]	@ (8001270 <HAL_GPIO_Init+0x31c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01f      	beq.n	8001172 <HAL_GPIO_Init+0x21e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4f      	ldr	r2, [pc, #316]	@ (8001274 <HAL_GPIO_Init+0x320>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x21a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4e      	ldr	r2, [pc, #312]	@ (8001278 <HAL_GPIO_Init+0x324>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x216>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4d      	ldr	r2, [pc, #308]	@ (800127c <HAL_GPIO_Init+0x328>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x212>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4c      	ldr	r2, [pc, #304]	@ (8001280 <HAL_GPIO_Init+0x32c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x20e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4b      	ldr	r2, [pc, #300]	@ (8001284 <HAL_GPIO_Init+0x330>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x20a>
 800115a:	2307      	movs	r3, #7
 800115c:	e00e      	b.n	800117c <HAL_GPIO_Init+0x228>
 800115e:	2308      	movs	r3, #8
 8001160:	e00c      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001162:	2306      	movs	r3, #6
 8001164:	e00a      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001166:	2305      	movs	r3, #5
 8001168:	e008      	b.n	800117c <HAL_GPIO_Init+0x228>
 800116a:	2304      	movs	r3, #4
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x228>
 800116e:	2303      	movs	r3, #3
 8001170:	e004      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001172:	2302      	movs	r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x228>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x228>
 800117a:	2300      	movs	r3, #0
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	f002 0203 	and.w	r2, r2, #3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4093      	lsls	r3, r2
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118c:	4935      	ldr	r1, [pc, #212]	@ (8001264 <HAL_GPIO_Init+0x310>)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <HAL_GPIO_Init+0x334>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a32      	ldr	r2, [pc, #200]	@ (8001288 <HAL_GPIO_Init+0x334>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b30      	ldr	r3, [pc, #192]	@ (8001288 <HAL_GPIO_Init+0x334>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a27      	ldr	r2, [pc, #156]	@ (8001288 <HAL_GPIO_Init+0x334>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ee:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <HAL_GPIO_Init+0x334>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001212:	4a1d      	ldr	r2, [pc, #116]	@ (8001288 <HAL_GPIO_Init+0x334>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <HAL_GPIO_Init+0x334>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123c:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <HAL_GPIO_Init+0x334>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	f67f ae90 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3724      	adds	r7, #36	@ 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40013800 	.word	0x40013800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40020800 	.word	0x40020800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40021000 	.word	0x40021000
 800127c:	40021400 	.word	0x40021400
 8001280:	40021800 	.word	0x40021800
 8001284:	40021c00 	.word	0x40021c00
 8001288:	40013c00 	.word	0x40013c00

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	619a      	str	r2, [r3, #24]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e267      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d075      	beq.n	80013ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012de:	4b88      	ldr	r3, [pc, #544]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d00c      	beq.n	8001304 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	4b85      	ldr	r3, [pc, #532]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d112      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4b82      	ldr	r3, [pc, #520]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001302:	d10b      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	4b7e      	ldr	r3, [pc, #504]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d05b      	beq.n	80013c8 <HAL_RCC_OscConfig+0x108>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d157      	bne.n	80013c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e242      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001324:	d106      	bne.n	8001334 <HAL_RCC_OscConfig+0x74>
 8001326:	4b76      	ldr	r3, [pc, #472]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a75      	ldr	r2, [pc, #468]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e01d      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x98>
 800133e:	4b70      	ldr	r3, [pc, #448]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6f      	ldr	r2, [pc, #444]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b6d      	ldr	r3, [pc, #436]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a6c      	ldr	r2, [pc, #432]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001358:	4b69      	ldr	r3, [pc, #420]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a68      	ldr	r2, [pc, #416]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b66      	ldr	r3, [pc, #408]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a65      	ldr	r2, [pc, #404]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fcfe 	bl	8000d78 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fcfa 	bl	8000d78 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	@ 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e207      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b5b      	ldr	r3, [pc, #364]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xc0>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fcea 	bl	8000d78 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fce6 	bl	8000d78 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	@ 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1f3      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	4b51      	ldr	r3, [pc, #324]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0xe8>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d063      	beq.n	800149e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b47      	ldr	r3, [pc, #284]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d11c      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b44      	ldr	r3, [pc, #272]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	4b41      	ldr	r3, [pc, #260]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e1c7      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b3b      	ldr	r3, [pc, #236]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4937      	ldr	r1, [pc, #220]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e03a      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001430:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <HAL_RCC_OscConfig+0x244>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fc9f 	bl	8000d78 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fc9b 	bl	8000d78 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e1a8      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	4b2b      	ldr	r3, [pc, #172]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4925      	ldr	r1, [pc, #148]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001472:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <HAL_RCC_OscConfig+0x244>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fc7e 	bl	8000d78 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fc7a 	bl	8000d78 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e187      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d036      	beq.n	8001518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <HAL_RCC_OscConfig+0x248>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fc5e 	bl	8000d78 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc5a 	bl	8000d78 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e167      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <HAL_RCC_OscConfig+0x240>)
 80014d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x200>
 80014de:	e01b      	b.n	8001518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <HAL_RCC_OscConfig+0x248>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fc47 	bl	8000d78 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	e00e      	b.n	800150c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fc43 	bl	8000d78 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d907      	bls.n	800150c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e150      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
 8001500:	40023800 	.word	0x40023800
 8001504:	42470000 	.word	0x42470000
 8001508:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b88      	ldr	r3, [pc, #544]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ea      	bne.n	80014ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8097 	beq.w	8001654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152a:	4b81      	ldr	r3, [pc, #516]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b7d      	ldr	r3, [pc, #500]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	4a7c      	ldr	r2, [pc, #496]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	@ 0x40
 8001546:	4b7a      	ldr	r3, [pc, #488]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b77      	ldr	r3, [pc, #476]	@ (8001734 <HAL_RCC_OscConfig+0x474>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b74      	ldr	r3, [pc, #464]	@ (8001734 <HAL_RCC_OscConfig+0x474>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a73      	ldr	r2, [pc, #460]	@ (8001734 <HAL_RCC_OscConfig+0x474>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fc03 	bl	8000d78 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001576:	f7ff fbff 	bl	8000d78 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e10c      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b6a      	ldr	r3, [pc, #424]	@ (8001734 <HAL_RCC_OscConfig+0x474>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x2ea>
 800159c:	4b64      	ldr	r3, [pc, #400]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a0:	4a63      	ldr	r2, [pc, #396]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a8:	e01c      	b.n	80015e4 <HAL_RCC_OscConfig+0x324>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x30c>
 80015b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015be:	4b5c      	ldr	r3, [pc, #368]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0x324>
 80015cc:	4b58      	ldr	r3, [pc, #352]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d0:	4a57      	ldr	r2, [pc, #348]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d8:	4b55      	ldr	r3, [pc, #340]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015dc:	4a54      	ldr	r2, [pc, #336]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 0304 	bic.w	r3, r3, #4
 80015e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d015      	beq.n	8001618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fbc4 	bl	8000d78 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	e00a      	b.n	800160a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff fbc0 	bl	8000d78 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e0cb      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160a:	4b49      	ldr	r3, [pc, #292]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0ee      	beq.n	80015f4 <HAL_RCC_OscConfig+0x334>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fbae 	bl	8000d78 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7ff fbaa 	bl	8000d78 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e0b5      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001636:	4b3e      	ldr	r3, [pc, #248]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ee      	bne.n	8001620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001648:	4b39      	ldr	r3, [pc, #228]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	4a38      	ldr	r2, [pc, #224]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 800164e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001652:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a1 	beq.w	80017a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165e:	4b34      	ldr	r3, [pc, #208]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d05c      	beq.n	8001724 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d141      	bne.n	80016f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <HAL_RCC_OscConfig+0x478>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fb7e 	bl	8000d78 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fb7a 	bl	8000d78 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e087      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ac:	019b      	lsls	r3, r3, #6
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	491b      	ldr	r1, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <HAL_RCC_OscConfig+0x478>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb53 	bl	8000d78 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fb4f 	bl	8000d78 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e05c      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x416>
 80016f4:	e054      	b.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <HAL_RCC_OscConfig+0x478>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb3c 	bl	8000d78 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff fb38 	bl	8000d78 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e045      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_RCC_OscConfig+0x470>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x444>
 8001722:	e03d      	b.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e038      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000
 8001738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_RCC_OscConfig+0x4ec>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d028      	beq.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d121      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d11a      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800176c:	4013      	ands	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001774:	4293      	cmp	r3, r2
 8001776:	d111      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	3b01      	subs	r3, #1
 8001786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d107      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0cc      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b68      	ldr	r3, [pc, #416]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d90c      	bls.n	80017ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b65      	ldr	r3, [pc, #404]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b63      	ldr	r3, [pc, #396]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b8      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001804:	4b59      	ldr	r3, [pc, #356]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a58      	ldr	r2, [pc, #352]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800180e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181c:	4b53      	ldr	r3, [pc, #332]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a52      	ldr	r2, [pc, #328]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001828:	4b50      	ldr	r3, [pc, #320]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	494d      	ldr	r1, [pc, #308]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d044      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4b47      	ldr	r3, [pc, #284]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d119      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e07f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d003      	beq.n	800186e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	2b03      	cmp	r3, #3
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b3f      	ldr	r3, [pc, #252]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e067      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188e:	4b37      	ldr	r3, [pc, #220]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4934      	ldr	r1, [pc, #208]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff fa6a 	bl	8000d78 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff fa66 	bl	8000d78 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e04f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 020c 	and.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1eb      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b25      	ldr	r3, [pc, #148]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d20c      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e032      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001904:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4916      	ldr	r1, [pc, #88]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	490e      	ldr	r1, [pc, #56]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001936:	f000 f821 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800193a:	4602      	mov	r2, r0
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	490a      	ldr	r1, [pc, #40]	@ (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	5ccb      	ldrb	r3, [r1, r3]
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a09      	ldr	r2, [pc, #36]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f864 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
 8001970:	080052a4 	.word	0x080052a4
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001980:	b094      	sub	sp, #80	@ 0x50
 8001982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001994:	4b79      	ldr	r3, [pc, #484]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d00d      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x40>
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	f200 80e1 	bhi.w	8001b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x34>
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ae:	e0db      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b73      	ldr	r3, [pc, #460]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b4:	e0db      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b6:	4b73      	ldr	r3, [pc, #460]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80019b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ba:	e0d8      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019bc:	4b6f      	ldr	r3, [pc, #444]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d063      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	099b      	lsrs	r3, r3, #6
 80019d8:	2200      	movs	r2, #0
 80019da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019ee:	4622      	mov	r2, r4
 80019f0:	462b      	mov	r3, r5
 80019f2:	f04f 0000 	mov.w	r0, #0
 80019f6:	f04f 0100 	mov.w	r1, #0
 80019fa:	0159      	lsls	r1, r3, #5
 80019fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a00:	0150      	lsls	r0, r2, #5
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4621      	mov	r1, r4
 8001a08:	1a51      	subs	r1, r2, r1
 8001a0a:	6139      	str	r1, [r7, #16]
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a20:	4659      	mov	r1, fp
 8001a22:	018b      	lsls	r3, r1, #6
 8001a24:	4651      	mov	r1, sl
 8001a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a2a:	4651      	mov	r1, sl
 8001a2c:	018a      	lsls	r2, r1, #6
 8001a2e:	4651      	mov	r1, sl
 8001a30:	ebb2 0801 	subs.w	r8, r2, r1
 8001a34:	4659      	mov	r1, fp
 8001a36:	eb63 0901 	sbc.w	r9, r3, r1
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a4e:	4690      	mov	r8, r2
 8001a50:	4699      	mov	r9, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	eb18 0303 	adds.w	r3, r8, r3
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	eb49 0303 	adc.w	r3, r9, r3
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a6e:	4629      	mov	r1, r5
 8001a70:	024b      	lsls	r3, r1, #9
 8001a72:	4621      	mov	r1, r4
 8001a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a78:	4621      	mov	r1, r4
 8001a7a:	024a      	lsls	r2, r1, #9
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a82:	2200      	movs	r2, #0
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a8c:	f7fe fba0 	bl	80001d0 <__aeabi_uldivmod>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4613      	mov	r3, r2
 8001a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a98:	e058      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4b38      	ldr	r3, [pc, #224]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	0159      	lsls	r1, r3, #5
 8001ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac6:	0150      	lsls	r0, r2, #5
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4641      	mov	r1, r8
 8001ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aec:	ebb2 040a 	subs.w	r4, r2, sl
 8001af0:	eb63 050b 	sbc.w	r5, r3, fp
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	00eb      	lsls	r3, r5, #3
 8001afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b02:	00e2      	lsls	r2, r4, #3
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	4643      	mov	r3, r8
 8001b0a:	18e3      	adds	r3, r4, r3
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	464b      	mov	r3, r9
 8001b10:	eb45 0303 	adc.w	r3, r5, r3
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b22:	4629      	mov	r1, r5
 8001b24:	028b      	lsls	r3, r1, #10
 8001b26:	4621      	mov	r1, r4
 8001b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	028a      	lsls	r2, r1, #10
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b36:	2200      	movs	r2, #0
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	61fa      	str	r2, [r7, #28]
 8001b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b40:	f7fe fb46 	bl	80001d0 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	0c1b      	lsrs	r3, r3, #16
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	3301      	adds	r3, #1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3750      	adds	r7, #80	@ 0x50
 8001b74:	46bd      	mov	sp, r7
 8001b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	00f42400 	.word	0x00f42400
 8001b84:	007a1200 	.word	0x007a1200

08001b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	@ (8001b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba4:	f7ff fff0 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	0a9b      	lsrs	r3, r3, #10
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	4903      	ldr	r1, [pc, #12]	@ (8001bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	080052b4 	.word	0x080052b4

08001bc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_RCC_GetClockConfig+0x5c>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001be4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <HAL_RCC_GetClockConfig+0x5c>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	08db      	lsrs	r3, r3, #3
 8001c02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c0a:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <HAL_RCC_GetClockConfig+0x60>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0207 	and.w	r2, r3, #7
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	601a      	str	r2, [r3, #0]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e041      	b.n	8001cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f839 	bl	8001cca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3304      	adds	r3, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f000 f9c0 	bl	8001ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d001      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e04e      	b.n	8001d96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d022      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x80>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d22:	d01d      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x80>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1f      	ldr	r2, [pc, #124]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d018      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x80>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1e      	ldr	r2, [pc, #120]	@ (8001dac <HAL_TIM_Base_Start_IT+0xcc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x80>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001db0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00e      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x80>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1b      	ldr	r2, [pc, #108]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x80>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a19      	ldr	r2, [pc, #100]	@ (8001db8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x80>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d111      	bne.n	8001d84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d010      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d82:	e007      	b.n	8001d94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40000400 	.word	0x40000400
 8001dac:	40000800 	.word	0x40000800
 8001db0:	40000c00 	.word	0x40000c00
 8001db4:	40010400 	.word	0x40010400
 8001db8:	40014000 	.word	0x40014000
 8001dbc:	40001800 	.word	0x40001800

08001dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d020      	beq.n	8001e24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01b      	beq.n	8001e24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0202 	mvn.w	r2, #2
 8001df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8d2 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8c4 	bl	8001fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f8d5 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d020      	beq.n	8001e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01b      	beq.n	8001e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0204 	mvn.w	r2, #4
 8001e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2202      	movs	r2, #2
 8001e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8ac 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001e5c:	e005      	b.n	8001e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f89e 	bl	8001fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f8af 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d020      	beq.n	8001ebc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01b      	beq.n	8001ebc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0208 	mvn.w	r2, #8
 8001e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2204      	movs	r2, #4
 8001e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f886 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f878 	bl	8001fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f889 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d020      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01b      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0210 	mvn.w	r2, #16
 8001ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2208      	movs	r2, #8
 8001ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f860 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f852 	bl	8001fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f863 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00c      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0201 	mvn.w	r2, #1
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fd3c 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00c      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f906 	bl	800215c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00c      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f834 	bl	8001fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00c      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0220 	mvn.w	r2, #32
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8d8 	bl	8002148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a46      	ldr	r2, [pc, #280]	@ (800211c <TIM_Base_SetConfig+0x12c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <TIM_Base_SetConfig+0x40>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200e:	d00f      	beq.n	8002030 <TIM_Base_SetConfig+0x40>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a43      	ldr	r2, [pc, #268]	@ (8002120 <TIM_Base_SetConfig+0x130>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00b      	beq.n	8002030 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a42      	ldr	r2, [pc, #264]	@ (8002124 <TIM_Base_SetConfig+0x134>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d007      	beq.n	8002030 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a41      	ldr	r2, [pc, #260]	@ (8002128 <TIM_Base_SetConfig+0x138>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d003      	beq.n	8002030 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a40      	ldr	r2, [pc, #256]	@ (800212c <TIM_Base_SetConfig+0x13c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d108      	bne.n	8002042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a35      	ldr	r2, [pc, #212]	@ (800211c <TIM_Base_SetConfig+0x12c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d02b      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002050:	d027      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a32      	ldr	r2, [pc, #200]	@ (8002120 <TIM_Base_SetConfig+0x130>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d023      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a31      	ldr	r2, [pc, #196]	@ (8002124 <TIM_Base_SetConfig+0x134>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a30      	ldr	r2, [pc, #192]	@ (8002128 <TIM_Base_SetConfig+0x138>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01b      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2f      	ldr	r2, [pc, #188]	@ (800212c <TIM_Base_SetConfig+0x13c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d017      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a2e      	ldr	r2, [pc, #184]	@ (8002130 <TIM_Base_SetConfig+0x140>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2d      	ldr	r2, [pc, #180]	@ (8002134 <TIM_Base_SetConfig+0x144>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00f      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2c      	ldr	r2, [pc, #176]	@ (8002138 <TIM_Base_SetConfig+0x148>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00b      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2b      	ldr	r2, [pc, #172]	@ (800213c <TIM_Base_SetConfig+0x14c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2a      	ldr	r2, [pc, #168]	@ (8002140 <TIM_Base_SetConfig+0x150>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d003      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a29      	ldr	r2, [pc, #164]	@ (8002144 <TIM_Base_SetConfig+0x154>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d108      	bne.n	80020b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a10      	ldr	r2, [pc, #64]	@ (800211c <TIM_Base_SetConfig+0x12c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d003      	beq.n	80020e8 <TIM_Base_SetConfig+0xf8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a12      	ldr	r2, [pc, #72]	@ (800212c <TIM_Base_SetConfig+0x13c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d103      	bne.n	80020f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d105      	bne.n	800210e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f023 0201 	bic.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]
  }
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40010000 	.word	0x40010000
 8002120:	40000400 	.word	0x40000400
 8002124:	40000800 	.word	0x40000800
 8002128:	40000c00 	.word	0x40000c00
 800212c:	40010400 	.word	0x40010400
 8002130:	40014000 	.word	0x40014000
 8002134:	40014400 	.word	0x40014400
 8002138:	40014800 	.word	0x40014800
 800213c:	40001800 	.word	0x40001800
 8002140:	40001c00 	.word	0x40001c00
 8002144:	40002000 	.word	0x40002000

08002148 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f103 0208 	add.w	r2, r3, #8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f103 0208 	add.w	r2, r3, #8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f103 0208 	add.w	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021ca:	b480      	push	{r7}
 80021cc:	b085      	sub	sp, #20
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	601a      	str	r2, [r3, #0]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002228:	d103      	bne.n	8002232 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e00c      	b.n	800224c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3308      	adds	r3, #8
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e002      	b.n	8002240 <vListInsert+0x2e>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	429a      	cmp	r2, r3
 800224a:	d2f6      	bcs.n	800223a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	601a      	str	r2, [r3, #0]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6892      	ldr	r2, [r2, #8]
 800229a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6852      	ldr	r2, [r2, #4]
 80022a4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d103      	bne.n	80022b8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1e5a      	subs	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10b      	bne.n	8002304 <xQueueGenericReset+0x2c>
        __asm volatile
 80022ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f0:	f383 8811 	msr	BASEPRI, r3
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	60bb      	str	r3, [r7, #8]
    }
 80022fe:	bf00      	nop
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002304:	f001 ff82 	bl	800420c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	441a      	add	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002334:	3b01      	subs	r3, #1
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	441a      	add	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	22ff      	movs	r2, #255	@ 0xff
 8002348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	22ff      	movs	r2, #255	@ 0xff
 8002350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d114      	bne.n	8002384 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01a      	beq.n	8002398 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3310      	adds	r3, #16
 8002366:	4618      	mov	r0, r3
 8002368:	f001 f862 	bl	8003430 <xTaskRemoveFromEventList>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d012      	beq.n	8002398 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <xQueueGenericReset+0xd0>)
 8002374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	e009      	b.n	8002398 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3310      	adds	r3, #16
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fef1 	bl	8002170 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3324      	adds	r3, #36	@ 0x24
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff feec 	bl	8002170 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002398:	f001 ff6a 	bl	8004270 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800239c:	2301      	movs	r3, #1
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000ed04 	.word	0xe000ed04

080023ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	@ 0x30
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	4613      	mov	r3, r2
 80023b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <xQueueGenericCreate+0x2c>
        __asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	61bb      	str	r3, [r7, #24]
    }
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	fb02 f303 	mul.w	r3, r2, r3
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <xQueueGenericCreate+0x4a>
 80023e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d101      	bne.n	80023fa <xQueueGenericCreate+0x4e>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <xQueueGenericCreate+0x50>
 80023fa:	2300      	movs	r3, #0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	617b      	str	r3, [r7, #20]
    }
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800241e:	d90b      	bls.n	8002438 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	613b      	str	r3, [r7, #16]
    }
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	3350      	adds	r3, #80	@ 0x50
 800243c:	4618      	mov	r0, r3
 800243e:	f002 f80f 	bl	8004460 <pvPortMalloc>
 8002442:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00d      	beq.n	8002466 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3350      	adds	r3, #80	@ 0x50
 8002452:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002454:	79fa      	ldrb	r2, [r7, #7]
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	4613      	mov	r3, r2
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f805 	bl	8002470 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002466:	6a3b      	ldr	r3, [r7, #32]
    }
 8002468:	4618      	mov	r0, r3
 800246a:	3728      	adds	r7, #40	@ 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e002      	b.n	8002492 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800249e:	2101      	movs	r1, #1
 80024a0:	69b8      	ldr	r0, [r7, #24]
 80024a2:	f7ff ff19 	bl	80022d8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08e      	sub	sp, #56	@ 0x38
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024c6:	2300      	movs	r3, #0
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10b      	bne.n	80024ec <xQueueGenericSend+0x34>
        __asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80024e6:	bf00      	nop
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <xQueueGenericSend+0x42>
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <xQueueGenericSend+0x46>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <xQueueGenericSend+0x48>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <xQueueGenericSend+0x64>
        __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d103      	bne.n	800252a <xQueueGenericSend+0x72>
 8002522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <xQueueGenericSend+0x76>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <xQueueGenericSend+0x78>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <xQueueGenericSend+0x94>
        __asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	623b      	str	r3, [r7, #32]
    }
 8002546:	bf00      	nop
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800254c:	f001 f910 	bl	8003770 <xTaskGetSchedulerState>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <xQueueGenericSend+0xa4>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <xQueueGenericSend+0xa8>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <xQueueGenericSend+0xaa>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <xQueueGenericSend+0xc6>
        __asm volatile
 8002566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800256a:	f383 8811 	msr	BASEPRI, r3
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	61fb      	str	r3, [r7, #28]
    }
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	e7fd      	b.n	800257a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800257e:	f001 fe45 	bl	800420c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258a:	429a      	cmp	r2, r3
 800258c:	d302      	bcc.n	8002594 <xQueueGenericSend+0xdc>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d129      	bne.n	80025e8 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800259a:	f000 fa1f 	bl	80029dc <prvCopyDataToQueue>
 800259e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d010      	beq.n	80025ca <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025aa:	3324      	adds	r3, #36	@ 0x24
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 ff3f 	bl	8003430 <xTaskRemoveFromEventList>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80025b8:	4b3f      	ldr	r3, [pc, #252]	@ (80026b8 <xQueueGenericSend+0x200>)
 80025ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	e00a      	b.n	80025e0 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80025d0:	4b39      	ldr	r3, [pc, #228]	@ (80026b8 <xQueueGenericSend+0x200>)
 80025d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80025e0:	f001 fe46 	bl	8004270 <vPortExitCritical>
                return pdPASS;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e063      	b.n	80026b0 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d103      	bne.n	80025f6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025ee:	f001 fe3f 	bl	8004270 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e05c      	b.n	80026b0 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4618      	mov	r0, r3
 8002602:	f000 ff79 	bl	80034f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002606:	2301      	movs	r3, #1
 8002608:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800260a:	f001 fe31 	bl	8004270 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800260e:	f000 fceb 	bl	8002fe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002612:	f001 fdfb 	bl	800420c <vPortEnterCritical>
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800261c:	b25b      	sxtb	r3, r3
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002622:	d103      	bne.n	800262c <xQueueGenericSend+0x174>
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002632:	b25b      	sxtb	r3, r3
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002638:	d103      	bne.n	8002642 <xQueueGenericSend+0x18a>
 800263a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002642:	f001 fe15 	bl	8004270 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002646:	1d3a      	adds	r2, r7, #4
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f000 ff68 	bl	8003524 <xTaskCheckForTimeOut>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d124      	bne.n	80026a4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800265a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800265c:	f000 fab6 	bl	8002bcc <prvIsQueueFull>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d018      	beq.n	8002698 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002668:	3310      	adds	r3, #16
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fe8c 	bl	800338c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002674:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002676:	f000 fa41 	bl	8002afc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800267a:	f000 fcc3 	bl	8003004 <xTaskResumeAll>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f af7c 	bne.w	800257e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002686:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <xQueueGenericSend+0x200>)
 8002688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	e772      	b.n	800257e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800269a:	f000 fa2f 	bl	8002afc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800269e:	f000 fcb1 	bl	8003004 <xTaskResumeAll>
 80026a2:	e76c      	b.n	800257e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026a6:	f000 fa29 	bl	8002afc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026aa:	f000 fcab 	bl	8003004 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80026ae:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3738      	adds	r7, #56	@ 0x38
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	e000ed04 	.word	0xe000ed04

080026bc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b090      	sub	sp, #64	@ 0x40
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80026ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80026d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d8:	f383 8811 	msr	BASEPRI, r3
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <xQueueGenericSendFromISR+0x3e>
 80026f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <xQueueGenericSendFromISR+0x42>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <xQueueGenericSendFromISR+0x44>
 80026fe:	2300      	movs	r3, #0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d103      	bne.n	800272a <xQueueGenericSendFromISR+0x6e>
 8002722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <xQueueGenericSendFromISR+0x72>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <xQueueGenericSendFromISR+0x74>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	623b      	str	r3, [r7, #32]
    }
 8002746:	bf00      	nop
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800274c:	f001 fe46 	bl	80043dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002750:	f3ef 8211 	mrs	r2, BASEPRI
 8002754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	61fa      	str	r2, [r7, #28]
 8002766:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002768:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800276a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800276c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800276e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002774:	429a      	cmp	r2, r3
 8002776:	d302      	bcc.n	800277e <xQueueGenericSendFromISR+0xc2>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d13f      	bne.n	80027fe <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800277e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002780:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002784:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002794:	f000 f922 	bl	80029dc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002798:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027a0:	d112      	bne.n	80027c8 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d026      	beq.n	80027f8 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ac:	3324      	adds	r3, #36	@ 0x24
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fe3e 	bl	8003430 <xTaskRemoveFromEventList>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01e      	beq.n	80027f8 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01b      	beq.n	80027f8 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e017      	b.n	80027f8 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80027cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80027ce:	d10b      	bne.n	80027e8 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	617b      	str	r3, [r7, #20]
    }
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027ec:	3301      	adds	r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	b25a      	sxtb	r2, r3
 80027f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80027f8:	2301      	movs	r3, #1
 80027fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80027fc:	e001      	b.n	8002802 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002804:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800280c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800280e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002810:	4618      	mov	r0, r3
 8002812:	3740      	adds	r7, #64	@ 0x40
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	@ 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800282c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <xQueueReceive+0x32>
        __asm volatile
 8002832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	623b      	str	r3, [r7, #32]
    }
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	e7fd      	b.n	8002846 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <xQueueReceive+0x40>
 8002850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <xQueueReceive+0x44>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <xQueueReceive+0x46>
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <xQueueReceive+0x62>
        __asm volatile
 8002862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	61fb      	str	r3, [r7, #28]
    }
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	e7fd      	b.n	8002876 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800287a:	f000 ff79 	bl	8003770 <xTaskGetSchedulerState>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <xQueueReceive+0x72>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <xQueueReceive+0x76>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <xQueueReceive+0x78>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <xQueueReceive+0x94>
        __asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	61bb      	str	r3, [r7, #24]
    }
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028ac:	f001 fcae 	bl	800420c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01f      	beq.n	80028fc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028c0:	f000 f8f6 	bl	8002ab0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ca:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00f      	beq.n	80028f4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d6:	3310      	adds	r3, #16
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fda9 	bl	8003430 <xTaskRemoveFromEventList>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80028e4:	4b3c      	ldr	r3, [pc, #240]	@ (80029d8 <xQueueReceive+0x1c0>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80028f4:	f001 fcbc 	bl	8004270 <vPortExitCritical>
                return pdPASS;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e069      	b.n	80029d0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002902:	f001 fcb5 	bl	8004270 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002906:	2300      	movs	r3, #0
 8002908:	e062      	b.n	80029d0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d106      	bne.n	800291e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fdef 	bl	80034f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800291a:	2301      	movs	r3, #1
 800291c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800291e:	f001 fca7 	bl	8004270 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002922:	f000 fb61 	bl	8002fe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002926:	f001 fc71 	bl	800420c <vPortEnterCritical>
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002930:	b25b      	sxtb	r3, r3
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002936:	d103      	bne.n	8002940 <xQueueReceive+0x128>
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002946:	b25b      	sxtb	r3, r3
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800294c:	d103      	bne.n	8002956 <xQueueReceive+0x13e>
 800294e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002956:	f001 fc8b 	bl	8004270 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800295a:	1d3a      	adds	r2, r7, #4
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fdde 	bl	8003524 <xTaskCheckForTimeOut>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d123      	bne.n	80029b6 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800296e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002970:	f000 f916 	bl	8002ba0 <prvIsQueueEmpty>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d017      	beq.n	80029aa <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800297a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297c:	3324      	adds	r3, #36	@ 0x24
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fd02 	bl	800338c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800298a:	f000 f8b7 	bl	8002afc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800298e:	f000 fb39 	bl	8003004 <xTaskResumeAll>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d189      	bne.n	80028ac <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002998:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <xQueueReceive+0x1c0>)
 800299a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	e780      	b.n	80028ac <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029ac:	f000 f8a6 	bl	8002afc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029b0:	f000 fb28 	bl	8003004 <xTaskResumeAll>
 80029b4:	e77a      	b.n	80028ac <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029b8:	f000 f8a0 	bl	8002afc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029bc:	f000 fb22 	bl	8003004 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029c2:	f000 f8ed 	bl	8002ba0 <prvIsQueueEmpty>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f43f af6f 	beq.w	80028ac <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80029ce:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3730      	adds	r7, #48	@ 0x30
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	e000ed04 	.word	0xe000ed04

080029dc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10d      	bne.n	8002a16 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d14d      	bne.n	8002a9e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fed0 	bl	80037ac <xTaskPriorityDisinherit>
 8002a0c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e043      	b.n	8002a9e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d119      	bne.n	8002a50 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6858      	ldr	r0, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	461a      	mov	r2, r3
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	f002 f989 	bl	8004d3e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	441a      	add	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d32b      	bcc.n	8002a9e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	e026      	b.n	8002a9e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68d8      	ldr	r0, [r3, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	f002 f96f 	bl	8004d3e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	425b      	negs	r3, r3
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d207      	bcs.n	8002a8c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	425b      	negs	r3, r3
 8002a86:	441a      	add	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d105      	bne.n	8002a9e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002aa6:	697b      	ldr	r3, [r7, #20]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d018      	beq.n	8002af4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	441a      	add	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d303      	bcc.n	8002ae4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68d9      	ldr	r1, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	461a      	mov	r2, r3
 8002aee:	6838      	ldr	r0, [r7, #0]
 8002af0:	f002 f925 	bl	8004d3e <memcpy>
    }
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b04:	f001 fb82 	bl	800420c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b10:	e011      	b.n	8002b36 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d012      	beq.n	8002b40 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3324      	adds	r3, #36	@ 0x24
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fc86 	bl	8003430 <xTaskRemoveFromEventList>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b2a:	f000 fd63 	bl	80035f4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	dce9      	bgt.n	8002b12 <prvUnlockQueue+0x16>
 8002b3e:	e000      	b.n	8002b42 <prvUnlockQueue+0x46>
                        break;
 8002b40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	22ff      	movs	r2, #255	@ 0xff
 8002b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002b4a:	f001 fb91 	bl	8004270 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b4e:	f001 fb5d 	bl	800420c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b5a:	e011      	b.n	8002b80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d012      	beq.n	8002b8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3310      	adds	r3, #16
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fc61 	bl	8003430 <xTaskRemoveFromEventList>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b74:	f000 fd3e 	bl	80035f4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b78:	7bbb      	ldrb	r3, [r7, #14]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	dce9      	bgt.n	8002b5c <prvUnlockQueue+0x60>
 8002b88:	e000      	b.n	8002b8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	22ff      	movs	r2, #255	@ 0xff
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002b94:	f001 fb6c 	bl	8004270 <vPortExitCritical>
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ba8:	f001 fb30 	bl	800420c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e001      	b.n	8002bbe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bbe:	f001 fb57 	bl	8004270 <vPortExitCritical>

    return xReturn;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bd4:	f001 fb1a 	bl	800420c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d102      	bne.n	8002bea <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002be4:	2301      	movs	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e001      	b.n	8002bee <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bee:	f001 fb3f 	bl	8004270 <vPortExitCritical>

    return xReturn;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e014      	b.n	8002c36 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c4c <vQueueAddToRegistry+0x50>)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c18:	490c      	ldr	r1, [pc, #48]	@ (8002c4c <vQueueAddToRegistry+0x50>)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c22:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <vQueueAddToRegistry+0x50>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002c2e:	e006      	b.n	8002c3e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3301      	adds	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b07      	cmp	r3, #7
 8002c3a:	d9e7      	bls.n	8002c0c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	200000d4 	.word	0x200000d4

08002c50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c60:	f001 fad4 	bl	800420c <vPortEnterCritical>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c6a:	b25b      	sxtb	r3, r3
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c70:	d103      	bne.n	8002c7a <vQueueWaitForMessageRestricted+0x2a>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c86:	d103      	bne.n	8002c90 <vQueueWaitForMessageRestricted+0x40>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c90:	f001 faee 	bl	8004270 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d106      	bne.n	8002caa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3324      	adds	r3, #36	@ 0x24
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fb97 	bl	80033d8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff26 	bl	8002afc <prvUnlockQueue>
    }
 8002cb0:	bf00      	nop
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	@ 0x30
 8002cbc:	af04      	add	r7, sp, #16
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 fbc7 	bl	8004460 <pvPortMalloc>
 8002cd2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cda:	2058      	movs	r0, #88	@ 0x58
 8002cdc:	f001 fbc0 	bl	8004460 <pvPortMalloc>
 8002ce0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cee:	e005      	b.n	8002cfc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f001 fc97 	bl	8004624 <vPortFree>
 8002cf6:	e001      	b.n	8002cfc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d013      	beq.n	8002d2a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	2300      	movs	r3, #0
 8002d06:	9303      	str	r3, [sp, #12]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	9302      	str	r3, [sp, #8]
 8002d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f80e 	bl	8002d3a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d1e:	69f8      	ldr	r0, [r7, #28]
 8002d20:	f000 f8a2 	bl	8002e68 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d24:	2301      	movs	r3, #1
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	e002      	b.n	8002d30 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d2e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d30:	69bb      	ldr	r3, [r7, #24]
    }
 8002d32:	4618      	mov	r0, r3
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b088      	sub	sp, #32
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	461a      	mov	r2, r3
 8002d52:	21a5      	movs	r1, #165	@ 0xa5
 8002d54:	f001 ff7e 	bl	8004c54 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d62:	3b01      	subs	r3, #1
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f023 0307 	bic.w	r3, r3, #7
 8002d70:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	617b      	str	r3, [r7, #20]
    }
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01f      	beq.n	8002dda <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	e012      	b.n	8002dc6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	4413      	add	r3, r2
 8002da6:	7819      	ldrb	r1, [r3, #0]
 8002da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	3334      	adds	r3, #52	@ 0x34
 8002db0:	460a      	mov	r2, r1
 8002db2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	4413      	add	r3, r2
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d006      	beq.n	8002dce <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2b09      	cmp	r3, #9
 8002dca:	d9e9      	bls.n	8002da0 <prvInitialiseNewTask+0x66>
 8002dcc:	e000      	b.n	8002dd0 <prvInitialiseNewTask+0x96>
            {
                break;
 8002dce:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002dd8:	e003      	b.n	8002de2 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d901      	bls.n	8002dec <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002de8:	2304      	movs	r3, #4
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002df0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002df6:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	3304      	adds	r3, #4
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff f9d4 	bl	80021b0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f9cf 	bl	80021b0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e16:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1a:	f1c3 0205 	rsb	r2, r3, #5
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e26:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	3350      	adds	r3, #80	@ 0x50
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 ff0f 	bl	8004c54 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e38:	3354      	adds	r3, #84	@ 0x54
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 ff08 	bl	8004c54 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	68f9      	ldr	r1, [r7, #12]
 8002e48:	69b8      	ldr	r0, [r7, #24]
 8002e4a:	f001 f8af 	bl	8003fac <pxPortInitialiseStack>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e5e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e60:	bf00      	nop
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e70:	f001 f9cc 	bl	800420c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e74:	4b2c      	ldr	r3, [pc, #176]	@ (8002f28 <prvAddNewTaskToReadyList+0xc0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f28 <prvAddNewTaskToReadyList+0xc0>)
 8002e7c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f2c <prvAddNewTaskToReadyList+0xc4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e86:	4a29      	ldr	r2, [pc, #164]	@ (8002f2c <prvAddNewTaskToReadyList+0xc4>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e8c:	4b26      	ldr	r3, [pc, #152]	@ (8002f28 <prvAddNewTaskToReadyList+0xc0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d110      	bne.n	8002eb6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e94:	f000 fbd2 	bl	800363c <prvInitialiseTaskLists>
 8002e98:	e00d      	b.n	8002eb6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e9a:	4b25      	ldr	r3, [pc, #148]	@ (8002f30 <prvAddNewTaskToReadyList+0xc8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ea2:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <prvAddNewTaskToReadyList+0xc4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d802      	bhi.n	8002eb6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f2c <prvAddNewTaskToReadyList+0xc4>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f34 <prvAddNewTaskToReadyList+0xcc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f34 <prvAddNewTaskToReadyList+0xcc>)
 8002ebe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f34 <prvAddNewTaskToReadyList+0xcc>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	2201      	movs	r2, #1
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <prvAddNewTaskToReadyList+0xd0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	4a18      	ldr	r2, [pc, #96]	@ (8002f38 <prvAddNewTaskToReadyList+0xd0>)
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4a15      	ldr	r2, [pc, #84]	@ (8002f3c <prvAddNewTaskToReadyList+0xd4>)
 8002ee8:	441a      	add	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	f7ff f96a 	bl	80021ca <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ef6:	f001 f9bb 	bl	8004270 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002efa:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <prvAddNewTaskToReadyList+0xc8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <prvAddNewTaskToReadyList+0xc4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d207      	bcs.n	8002f20 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <prvAddNewTaskToReadyList+0xd8>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	200001ec 	.word	0x200001ec
 8002f2c:	20000114 	.word	0x20000114
 8002f30:	200001f8 	.word	0x200001f8
 8002f34:	20000208 	.word	0x20000208
 8002f38:	200001f4 	.word	0x200001f4
 8002f3c:	20000118 	.word	0x20000118
 8002f40:	e000ed04 	.word	0xe000ed04

08002f44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f4a:	4b20      	ldr	r3, [pc, #128]	@ (8002fcc <vTaskStartScheduler+0x88>)
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2300      	movs	r3, #0
 8002f54:	2282      	movs	r2, #130	@ 0x82
 8002f56:	491e      	ldr	r1, [pc, #120]	@ (8002fd0 <vTaskStartScheduler+0x8c>)
 8002f58:	481e      	ldr	r0, [pc, #120]	@ (8002fd4 <vTaskStartScheduler+0x90>)
 8002f5a:	f7ff fead 	bl	8002cb8 <xTaskCreate>
 8002f5e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d102      	bne.n	8002f6c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002f66:	f000 fd03 	bl	8003970 <xTimerCreateTimerTask>
 8002f6a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d116      	bne.n	8002fa0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	60bb      	str	r3, [r7, #8]
    }
 8002f84:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f86:	4b14      	ldr	r3, [pc, #80]	@ (8002fd8 <vTaskStartScheduler+0x94>)
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f8e:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <vTaskStartScheduler+0x98>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f94:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <vTaskStartScheduler+0x9c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f9a:	f001 f893 	bl	80040c4 <xPortStartScheduler>
 8002f9e:	e00f      	b.n	8002fc0 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fa6:	d10b      	bne.n	8002fc0 <vTaskStartScheduler+0x7c>
        __asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	607b      	str	r3, [r7, #4]
    }
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <vTaskStartScheduler+0xa0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000210 	.word	0x20000210
 8002fd0:	0800528c 	.word	0x0800528c
 8002fd4:	0800360d 	.word	0x0800360d
 8002fd8:	2000020c 	.word	0x2000020c
 8002fdc:	200001f8 	.word	0x200001f8
 8002fe0:	200001f0 	.word	0x200001f0
 8002fe4:	080052bc 	.word	0x080052bc

08002fe8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002fec:	4b04      	ldr	r3, [pc, #16]	@ (8003000 <vTaskSuspendAll+0x18>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a03      	ldr	r2, [pc, #12]	@ (8003000 <vTaskSuspendAll+0x18>)
 8002ff4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002ff6:	bf00      	nop
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	20000214 	.word	0x20000214

08003004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003012:	4b42      	ldr	r3, [pc, #264]	@ (800311c <xTaskResumeAll+0x118>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <xTaskResumeAll+0x2e>
        __asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	603b      	str	r3, [r7, #0]
    }
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	e7fd      	b.n	800302e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003032:	f001 f8eb 	bl	800420c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003036:	4b39      	ldr	r3, [pc, #228]	@ (800311c <xTaskResumeAll+0x118>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3b01      	subs	r3, #1
 800303c:	4a37      	ldr	r2, [pc, #220]	@ (800311c <xTaskResumeAll+0x118>)
 800303e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003040:	4b36      	ldr	r3, [pc, #216]	@ (800311c <xTaskResumeAll+0x118>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d161      	bne.n	800310c <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003048:	4b35      	ldr	r3, [pc, #212]	@ (8003120 <xTaskResumeAll+0x11c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05d      	beq.n	800310c <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003050:	e02e      	b.n	80030b0 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003052:	4b34      	ldr	r3, [pc, #208]	@ (8003124 <xTaskResumeAll+0x120>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3318      	adds	r3, #24
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff f910 	bl	8002284 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3304      	adds	r3, #4
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f90b 	bl	8002284 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	2201      	movs	r2, #1
 8003074:	409a      	lsls	r2, r3
 8003076:	4b2c      	ldr	r3, [pc, #176]	@ (8003128 <xTaskResumeAll+0x124>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	4a2a      	ldr	r2, [pc, #168]	@ (8003128 <xTaskResumeAll+0x124>)
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4a27      	ldr	r2, [pc, #156]	@ (800312c <xTaskResumeAll+0x128>)
 800308e:	441a      	add	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f7ff f897 	bl	80021ca <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a0:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <xTaskResumeAll+0x12c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80030aa:	4b22      	ldr	r3, [pc, #136]	@ (8003134 <xTaskResumeAll+0x130>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003124 <xTaskResumeAll+0x120>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1cc      	bne.n	8003052 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030be:	f000 fb3b 	bl	8003738 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003138 <xTaskResumeAll+0x134>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d010      	beq.n	80030f0 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030ce:	f000 f847 	bl	8003160 <xTaskIncrementTick>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80030d8:	4b16      	ldr	r3, [pc, #88]	@ (8003134 <xTaskResumeAll+0x130>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f1      	bne.n	80030ce <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80030ea:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <xTaskResumeAll+0x134>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80030f0:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <xTaskResumeAll+0x130>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80030fc:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <xTaskResumeAll+0x138>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800310c:	f001 f8b0 	bl	8004270 <vPortExitCritical>

    return xAlreadyYielded;
 8003110:	68bb      	ldr	r3, [r7, #8]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000214 	.word	0x20000214
 8003120:	200001ec 	.word	0x200001ec
 8003124:	200001ac 	.word	0x200001ac
 8003128:	200001f4 	.word	0x200001f4
 800312c:	20000118 	.word	0x20000118
 8003130:	20000114 	.word	0x20000114
 8003134:	20000200 	.word	0x20000200
 8003138:	200001fc 	.word	0x200001fc
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003146:	4b05      	ldr	r3, [pc, #20]	@ (800315c <xTaskGetTickCount+0x1c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800314c:	687b      	ldr	r3, [r7, #4]
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	200001f0 	.word	0x200001f0

08003160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316a:	4b4f      	ldr	r3, [pc, #316]	@ (80032a8 <xTaskIncrementTick+0x148>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 808f 	bne.w	8003292 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003174:	4b4d      	ldr	r3, [pc, #308]	@ (80032ac <xTaskIncrementTick+0x14c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800317c:	4a4b      	ldr	r2, [pc, #300]	@ (80032ac <xTaskIncrementTick+0x14c>)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d121      	bne.n	80031cc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003188:	4b49      	ldr	r3, [pc, #292]	@ (80032b0 <xTaskIncrementTick+0x150>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <xTaskIncrementTick+0x4a>
        __asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	603b      	str	r3, [r7, #0]
    }
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	e7fd      	b.n	80031a6 <xTaskIncrementTick+0x46>
 80031aa:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <xTaskIncrementTick+0x150>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	4b40      	ldr	r3, [pc, #256]	@ (80032b4 <xTaskIncrementTick+0x154>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a3e      	ldr	r2, [pc, #248]	@ (80032b0 <xTaskIncrementTick+0x150>)
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4a3e      	ldr	r2, [pc, #248]	@ (80032b4 <xTaskIncrementTick+0x154>)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b3e      	ldr	r3, [pc, #248]	@ (80032b8 <xTaskIncrementTick+0x158>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	4a3c      	ldr	r2, [pc, #240]	@ (80032b8 <xTaskIncrementTick+0x158>)
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	f000 fab6 	bl	8003738 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80031cc:	4b3b      	ldr	r3, [pc, #236]	@ (80032bc <xTaskIncrementTick+0x15c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d348      	bcc.n	8003268 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031d6:	4b36      	ldr	r3, [pc, #216]	@ (80032b0 <xTaskIncrementTick+0x150>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e0:	4b36      	ldr	r3, [pc, #216]	@ (80032bc <xTaskIncrementTick+0x15c>)
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031e6:	601a      	str	r2, [r3, #0]
                    break;
 80031e8:	e03e      	b.n	8003268 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ea:	4b31      	ldr	r3, [pc, #196]	@ (80032b0 <xTaskIncrementTick+0x150>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d203      	bcs.n	800320a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003202:	4a2e      	ldr	r2, [pc, #184]	@ (80032bc <xTaskIncrementTick+0x15c>)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003208:	e02e      	b.n	8003268 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	3304      	adds	r3, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f838 	bl	8002284 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	3318      	adds	r3, #24
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff f82f 	bl	8002284 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	2201      	movs	r2, #1
 800322c:	409a      	lsls	r2, r3
 800322e:	4b24      	ldr	r3, [pc, #144]	@ (80032c0 <xTaskIncrementTick+0x160>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	4a22      	ldr	r2, [pc, #136]	@ (80032c0 <xTaskIncrementTick+0x160>)
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4a1f      	ldr	r2, [pc, #124]	@ (80032c4 <xTaskIncrementTick+0x164>)
 8003246:	441a      	add	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3304      	adds	r3, #4
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f7fe ffbb 	bl	80021ca <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003258:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <xTaskIncrementTick+0x168>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	429a      	cmp	r2, r3
 8003260:	d3b9      	bcc.n	80031d6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003262:	2301      	movs	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003266:	e7b6      	b.n	80031d6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003268:	4b17      	ldr	r3, [pc, #92]	@ (80032c8 <xTaskIncrementTick+0x168>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326e:	4915      	ldr	r1, [pc, #84]	@ (80032c4 <xTaskIncrementTick+0x164>)
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d901      	bls.n	8003284 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8003280:	2301      	movs	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003284:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <xTaskIncrementTick+0x16c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e004      	b.n	800329c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003292:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <xTaskIncrementTick+0x170>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3301      	adds	r3, #1
 8003298:	4a0d      	ldr	r2, [pc, #52]	@ (80032d0 <xTaskIncrementTick+0x170>)
 800329a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800329c:	697b      	ldr	r3, [r7, #20]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000214 	.word	0x20000214
 80032ac:	200001f0 	.word	0x200001f0
 80032b0:	200001a4 	.word	0x200001a4
 80032b4:	200001a8 	.word	0x200001a8
 80032b8:	20000204 	.word	0x20000204
 80032bc:	2000020c 	.word	0x2000020c
 80032c0:	200001f4 	.word	0x200001f4
 80032c4:	20000118 	.word	0x20000118
 80032c8:	20000114 	.word	0x20000114
 80032cc:	20000200 	.word	0x20000200
 80032d0:	200001fc 	.word	0x200001fc

080032d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032da:	4b27      	ldr	r3, [pc, #156]	@ (8003378 <vTaskSwitchContext+0xa4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032e2:	4b26      	ldr	r3, [pc, #152]	@ (800337c <vTaskSwitchContext+0xa8>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80032e8:	e040      	b.n	800336c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80032ea:	4b24      	ldr	r3, [pc, #144]	@ (800337c <vTaskSwitchContext+0xa8>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f0:	4b23      	ldr	r3, [pc, #140]	@ (8003380 <vTaskSwitchContext+0xac>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	f1c3 031f 	rsb	r3, r3, #31
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	491f      	ldr	r1, [pc, #124]	@ (8003384 <vTaskSwitchContext+0xb0>)
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <vTaskSwitchContext+0x5e>
        __asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	607b      	str	r3, [r7, #4]
    }
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	e7fd      	b.n	800332e <vTaskSwitchContext+0x5a>
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4a11      	ldr	r2, [pc, #68]	@ (8003384 <vTaskSwitchContext+0xb0>)
 800333e:	4413      	add	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	3308      	adds	r3, #8
 8003354:	429a      	cmp	r2, r3
 8003356:	d104      	bne.n	8003362 <vTaskSwitchContext+0x8e>
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <vTaskSwitchContext+0xb4>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	20000214 	.word	0x20000214
 800337c:	20000200 	.word	0x20000200
 8003380:	200001f4 	.word	0x200001f4
 8003384:	20000118 	.word	0x20000118
 8003388:	20000114 	.word	0x20000114

0800338c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	60fb      	str	r3, [r7, #12]
    }
 80033ae:	bf00      	nop
 80033b0:	bf00      	nop
 80033b2:	e7fd      	b.n	80033b0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033b4:	4b07      	ldr	r3, [pc, #28]	@ (80033d4 <vTaskPlaceOnEventList+0x48>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3318      	adds	r3, #24
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7fe ff28 	bl	8002212 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033c2:	2101      	movs	r1, #1
 80033c4:	6838      	ldr	r0, [r7, #0]
 80033c6:	f000 fa6d 	bl	80038a4 <prvAddCurrentTaskToDelayedList>
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000114 	.word	0x20000114

080033d8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	617b      	str	r3, [r7, #20]
    }
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	e7fd      	b.n	80033fe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003402:	4b0a      	ldr	r3, [pc, #40]	@ (800342c <vTaskPlaceOnEventListRestricted+0x54>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3318      	adds	r3, #24
 8003408:	4619      	mov	r1, r3
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f7fe fedd 	bl	80021ca <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8003416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800341a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	68b8      	ldr	r0, [r7, #8]
 8003420:	f000 fa40 	bl	80038a4 <prvAddCurrentTaskToDelayedList>
    }
 8003424:	bf00      	nop
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000114 	.word	0x20000114

08003430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10b      	bne.n	800345e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	60fb      	str	r3, [r7, #12]
    }
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	e7fd      	b.n	800345a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	3318      	adds	r3, #24
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe ff0e 	bl	8002284 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003468:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <xTaskRemoveFromEventList+0xb0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d11c      	bne.n	80034aa <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	3304      	adds	r3, #4
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe ff05 	bl	8002284 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	2201      	movs	r2, #1
 8003480:	409a      	lsls	r2, r3
 8003482:	4b18      	ldr	r3, [pc, #96]	@ (80034e4 <xTaskRemoveFromEventList+0xb4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <xTaskRemoveFromEventList+0xb4>)
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4a13      	ldr	r2, [pc, #76]	@ (80034e8 <xTaskRemoveFromEventList+0xb8>)
 800349a:	441a      	add	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	3304      	adds	r3, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f7fe fe91 	bl	80021ca <vListInsertEnd>
 80034a8:	e005      	b.n	80034b6 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3318      	adds	r3, #24
 80034ae:	4619      	mov	r1, r3
 80034b0:	480e      	ldr	r0, [pc, #56]	@ (80034ec <xTaskRemoveFromEventList+0xbc>)
 80034b2:	f7fe fe8a 	bl	80021ca <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ba:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <xTaskRemoveFromEventList+0xc0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d905      	bls.n	80034d0 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80034c8:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <xTaskRemoveFromEventList+0xc4>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e001      	b.n	80034d4 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80034d4:	697b      	ldr	r3, [r7, #20]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000214 	.word	0x20000214
 80034e4:	200001f4 	.word	0x200001f4
 80034e8:	20000118 	.word	0x20000118
 80034ec:	200001ac 	.word	0x200001ac
 80034f0:	20000114 	.word	0x20000114
 80034f4:	20000200 	.word	0x20000200

080034f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003500:	4b06      	ldr	r3, [pc, #24]	@ (800351c <vTaskInternalSetTimeOutState+0x24>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <vTaskInternalSetTimeOutState+0x28>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	605a      	str	r2, [r3, #4]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	20000204 	.word	0x20000204
 8003520:	200001f0 	.word	0x200001f0

08003524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	613b      	str	r3, [r7, #16]
    }
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	60fb      	str	r3, [r7, #12]
    }
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800356a:	f000 fe4f 	bl	800420c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <xTaskCheckForTimeOut+0xc8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003586:	d102      	bne.n	800358e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	e026      	b.n	80035dc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <xTaskCheckForTimeOut+0xcc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d00a      	beq.n	80035b0 <xTaskCheckForTimeOut+0x8c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d305      	bcc.n	80035b0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e015      	b.n	80035dc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d20b      	bcs.n	80035d2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	1ad2      	subs	r2, r2, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ff96 	bl	80034f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e004      	b.n	80035dc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80035d8:	2301      	movs	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80035dc:	f000 fe48 	bl	8004270 <vPortExitCritical>

    return xReturn;
 80035e0:	69fb      	ldr	r3, [r7, #28]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200001f0 	.word	0x200001f0
 80035f0:	20000204 	.word	0x20000204

080035f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035f8:	4b03      	ldr	r3, [pc, #12]	@ (8003608 <vTaskMissedYield+0x14>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	20000200 	.word	0x20000200

0800360c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003614:	f000 f852 	bl	80036bc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <prvIdleTask+0x28>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d9f9      	bls.n	8003614 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003620:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <prvIdleTask+0x2c>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003630:	e7f0      	b.n	8003614 <prvIdleTask+0x8>
 8003632:	bf00      	nop
 8003634:	20000118 	.word	0x20000118
 8003638:	e000ed04 	.word	0xe000ed04

0800363c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	e00c      	b.n	8003662 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4a12      	ldr	r2, [pc, #72]	@ (800369c <prvInitialiseTaskLists+0x60>)
 8003654:	4413      	add	r3, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fd8a 	bl	8002170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3301      	adds	r3, #1
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b04      	cmp	r3, #4
 8003666:	d9ef      	bls.n	8003648 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003668:	480d      	ldr	r0, [pc, #52]	@ (80036a0 <prvInitialiseTaskLists+0x64>)
 800366a:	f7fe fd81 	bl	8002170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800366e:	480d      	ldr	r0, [pc, #52]	@ (80036a4 <prvInitialiseTaskLists+0x68>)
 8003670:	f7fe fd7e 	bl	8002170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003674:	480c      	ldr	r0, [pc, #48]	@ (80036a8 <prvInitialiseTaskLists+0x6c>)
 8003676:	f7fe fd7b 	bl	8002170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800367a:	480c      	ldr	r0, [pc, #48]	@ (80036ac <prvInitialiseTaskLists+0x70>)
 800367c:	f7fe fd78 	bl	8002170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003680:	480b      	ldr	r0, [pc, #44]	@ (80036b0 <prvInitialiseTaskLists+0x74>)
 8003682:	f7fe fd75 	bl	8002170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003686:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <prvInitialiseTaskLists+0x78>)
 8003688:	4a05      	ldr	r2, [pc, #20]	@ (80036a0 <prvInitialiseTaskLists+0x64>)
 800368a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <prvInitialiseTaskLists+0x7c>)
 800368e:	4a05      	ldr	r2, [pc, #20]	@ (80036a4 <prvInitialiseTaskLists+0x68>)
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000118 	.word	0x20000118
 80036a0:	2000017c 	.word	0x2000017c
 80036a4:	20000190 	.word	0x20000190
 80036a8:	200001ac 	.word	0x200001ac
 80036ac:	200001c0 	.word	0x200001c0
 80036b0:	200001d8 	.word	0x200001d8
 80036b4:	200001a4 	.word	0x200001a4
 80036b8:	200001a8 	.word	0x200001a8

080036bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036c2:	e019      	b.n	80036f8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80036c4:	f000 fda2 	bl	800420c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c8:	4b10      	ldr	r3, [pc, #64]	@ (800370c <prvCheckTasksWaitingTermination+0x50>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe fdd5 	bl	8002284 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80036da:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <prvCheckTasksWaitingTermination+0x54>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3b01      	subs	r3, #1
 80036e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003710 <prvCheckTasksWaitingTermination+0x54>)
 80036e2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <prvCheckTasksWaitingTermination+0x58>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003714 <prvCheckTasksWaitingTermination+0x58>)
 80036ec:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80036ee:	f000 fdbf 	bl	8004270 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f810 	bl	8003718 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036f8:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <prvCheckTasksWaitingTermination+0x58>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e1      	bne.n	80036c4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200001c0 	.word	0x200001c0
 8003710:	200001ec 	.word	0x200001ec
 8003714:	200001d4 	.word	0x200001d4

08003718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003724:	4618      	mov	r0, r3
 8003726:	f000 ff7d 	bl	8004624 <vPortFree>
                vPortFree( pxTCB );
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 ff7a 	bl	8004624 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800373c:	4b0a      	ldr	r3, [pc, #40]	@ (8003768 <prvResetNextTaskUnblockTime+0x30>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d104      	bne.n	8003750 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003746:	4b09      	ldr	r3, [pc, #36]	@ (800376c <prvResetNextTaskUnblockTime+0x34>)
 8003748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800374c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800374e:	e005      	b.n	800375c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <prvResetNextTaskUnblockTime+0x30>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a04      	ldr	r2, [pc, #16]	@ (800376c <prvResetNextTaskUnblockTime+0x34>)
 800375a:	6013      	str	r3, [r2, #0]
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	200001a4 	.word	0x200001a4
 800376c:	2000020c 	.word	0x2000020c

08003770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003776:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <xTaskGetSchedulerState+0x34>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800377e:	2301      	movs	r3, #1
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	e008      	b.n	8003796 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003784:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <xTaskGetSchedulerState+0x38>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800378c:	2302      	movs	r3, #2
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	e001      	b.n	8003796 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003796:	687b      	ldr	r3, [r7, #4]
    }
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	200001f8 	.word	0x200001f8
 80037a8:	20000214 	.word	0x20000214

080037ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d065      	beq.n	800388e <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80037c2:	4b35      	ldr	r3, [pc, #212]	@ (8003898 <xTaskPriorityDisinherit+0xec>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d00b      	beq.n	80037e4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	60fb      	str	r3, [r7, #12]
    }
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10b      	bne.n	8003804 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	60bb      	str	r3, [r7, #8]
    }
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003816:	429a      	cmp	r2, r3
 8003818:	d039      	beq.n	800388e <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d135      	bne.n	800388e <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3304      	adds	r3, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fd2c 	bl	8002284 <uxListRemove>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	2201      	movs	r2, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43da      	mvns	r2, r3
 800383e:	4b17      	ldr	r3, [pc, #92]	@ (800389c <xTaskPriorityDisinherit+0xf0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4013      	ands	r3, r2
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <xTaskPriorityDisinherit+0xf0>)
 8003846:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	f1c3 0205 	rsb	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	2201      	movs	r2, #1
 8003862:	409a      	lsls	r2, r3
 8003864:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <xTaskPriorityDisinherit+0xf0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4313      	orrs	r3, r2
 800386a:	4a0c      	ldr	r2, [pc, #48]	@ (800389c <xTaskPriorityDisinherit+0xf0>)
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4a09      	ldr	r2, [pc, #36]	@ (80038a0 <xTaskPriorityDisinherit+0xf4>)
 800387c:	441a      	add	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	3304      	adds	r3, #4
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f7fe fca0 	bl	80021ca <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800388a:	2301      	movs	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800388e:	697b      	ldr	r3, [r7, #20]
    }
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000114 	.word	0x20000114
 800389c:	200001f4 	.word	0x200001f4
 80038a0:	20000118 	.word	0x20000118

080038a4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038ae:	4b29      	ldr	r3, [pc, #164]	@ (8003954 <prvAddCurrentTaskToDelayedList+0xb0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038b4:	4b28      	ldr	r3, [pc, #160]	@ (8003958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3304      	adds	r3, #4
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fce2 	bl	8002284 <uxListRemove>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038c6:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038cc:	2201      	movs	r2, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	4b21      	ldr	r3, [pc, #132]	@ (800395c <prvAddCurrentTaskToDelayedList+0xb8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4013      	ands	r3, r2
 80038da:	4a20      	ldr	r2, [pc, #128]	@ (800395c <prvAddCurrentTaskToDelayedList+0xb8>)
 80038dc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038e4:	d10a      	bne.n	80038fc <prvAddCurrentTaskToDelayedList+0x58>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	481a      	ldr	r0, [pc, #104]	@ (8003960 <prvAddCurrentTaskToDelayedList+0xbc>)
 80038f6:	f7fe fc68 	bl	80021ca <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80038fa:	e026      	b.n	800394a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003904:	4b14      	ldr	r3, [pc, #80]	@ (8003958 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	429a      	cmp	r2, r3
 8003912:	d209      	bcs.n	8003928 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003914:	4b13      	ldr	r3, [pc, #76]	@ (8003964 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b0f      	ldr	r3, [pc, #60]	@ (8003958 <prvAddCurrentTaskToDelayedList+0xb4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3304      	adds	r3, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f7fe fc76 	bl	8002212 <vListInsert>
}
 8003926:	e010      	b.n	800394a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003928:	4b0f      	ldr	r3, [pc, #60]	@ (8003968 <prvAddCurrentTaskToDelayedList+0xc4>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <prvAddCurrentTaskToDelayedList+0xb4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3304      	adds	r3, #4
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7fe fc6c 	bl	8002212 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800393a:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <prvAddCurrentTaskToDelayedList+0xc8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	d202      	bcs.n	800394a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003944:	4a09      	ldr	r2, [pc, #36]	@ (800396c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6013      	str	r3, [r2, #0]
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200001f0 	.word	0x200001f0
 8003958:	20000114 	.word	0x20000114
 800395c:	200001f4 	.word	0x200001f4
 8003960:	200001d8 	.word	0x200001d8
 8003964:	200001a8 	.word	0x200001a8
 8003968:	200001a4 	.word	0x200001a4
 800396c:	2000020c 	.word	0x2000020c

08003970 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800397a:	f000 fae1 	bl	8003f40 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800397e:	4b12      	ldr	r3, [pc, #72]	@ (80039c8 <xTimerCreateTimerTask+0x58>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003986:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <xTimerCreateTimerTask+0x5c>)
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	2302      	movs	r3, #2
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2300      	movs	r3, #0
 8003990:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003994:	490e      	ldr	r1, [pc, #56]	@ (80039d0 <xTimerCreateTimerTask+0x60>)
 8003996:	480f      	ldr	r0, [pc, #60]	@ (80039d4 <xTimerCreateTimerTask+0x64>)
 8003998:	f7ff f98e 	bl	8002cb8 <xTaskCreate>
 800399c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	603b      	str	r3, [r7, #0]
    }
 80039b6:	bf00      	nop
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80039bc:	687b      	ldr	r3, [r7, #4]
    }
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000248 	.word	0x20000248
 80039cc:	2000024c 	.word	0x2000024c
 80039d0:	08005294 	.word	0x08005294
 80039d4:	08003b11 	.word	0x08003b11

080039d8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <xTimerGenericCommand+0x30>
        __asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	623b      	str	r3, [r7, #32]
    }
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a08:	4b19      	ldr	r3, [pc, #100]	@ (8003a70 <xTimerGenericCommand+0x98>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d02a      	beq.n	8003a66 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b05      	cmp	r3, #5
 8003a20:	dc18      	bgt.n	8003a54 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a22:	f7ff fea5 	bl	8003770 <xTaskGetSchedulerState>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d109      	bne.n	8003a40 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a2c:	4b10      	ldr	r3, [pc, #64]	@ (8003a70 <xTimerGenericCommand+0x98>)
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	f107 0114 	add.w	r1, r7, #20
 8003a34:	2300      	movs	r3, #0
 8003a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a38:	f7fe fd3e 	bl	80024b8 <xQueueGenericSend>
 8003a3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a3e:	e012      	b.n	8003a66 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <xTimerGenericCommand+0x98>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	f107 0114 	add.w	r1, r7, #20
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f7fe fd34 	bl	80024b8 <xQueueGenericSend>
 8003a50:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a52:	e008      	b.n	8003a66 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a54:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <xTimerGenericCommand+0x98>)
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	f107 0114 	add.w	r1, r7, #20
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	f7fe fe2c 	bl	80026bc <xQueueGenericSendFromISR>
 8003a64:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3728      	adds	r7, #40	@ 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000248 	.word	0x20000248

08003a74 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7e:	4b23      	ldr	r3, [pc, #140]	@ (8003b0c <prvProcessExpiredTimer+0x98>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe fbf9 	bl	8002284 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d023      	beq.n	8003ae8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	18d1      	adds	r1, r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	6978      	ldr	r0, [r7, #20]
 8003aae:	f000 f8d5 	bl	8003c5c <prvInsertTimerInActiveList>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff ff88 	bl	80039d8 <xTimerGenericCommand>
 8003ac8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d114      	bne.n	8003afa <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	60fb      	str	r3, [r7, #12]
    }
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	6978      	ldr	r0, [r7, #20]
 8003b00:	4798      	blx	r3
    }
 8003b02:	bf00      	nop
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000240 	.word	0x20000240

08003b10 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b18:	f107 0308 	add.w	r3, r7, #8
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f859 	bl	8003bd4 <prvGetNextExpireTime>
 8003b22:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4619      	mov	r1, r3
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f805 	bl	8003b38 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b2e:	f000 f8d7 	bl	8003ce0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b32:	bf00      	nop
 8003b34:	e7f0      	b.n	8003b18 <prvTimerTask+0x8>
	...

08003b38 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b42:	f7ff fa51 	bl	8002fe8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b46:	f107 0308 	add.w	r3, r7, #8
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f866 	bl	8003c1c <prvSampleTimeNow>
 8003b50:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d130      	bne.n	8003bba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <prvProcessTimerOrBlockTask+0x3c>
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d806      	bhi.n	8003b74 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003b66:	f7ff fa4d 	bl	8003004 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff81 	bl	8003a74 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b72:	e024      	b.n	8003bbe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b7a:	4b13      	ldr	r3, [pc, #76]	@ (8003bc8 <prvProcessTimerOrBlockTask+0x90>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <prvProcessTimerOrBlockTask+0x50>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <prvProcessTimerOrBlockTask+0x52>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bcc <prvProcessTimerOrBlockTask+0x94>)
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f7ff f859 	bl	8002c50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b9e:	f7ff fa31 	bl	8003004 <xTaskResumeAll>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003ba8:	4b09      	ldr	r3, [pc, #36]	@ (8003bd0 <prvProcessTimerOrBlockTask+0x98>)
 8003baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	f3bf 8f6f 	isb	sy
    }
 8003bb8:	e001      	b.n	8003bbe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003bba:	f7ff fa23 	bl	8003004 <xTaskResumeAll>
    }
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000244 	.word	0x20000244
 8003bcc:	20000248 	.word	0x20000248
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c18 <prvGetNextExpireTime+0x44>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <prvGetNextExpireTime+0x16>
 8003be6:	2201      	movs	r2, #1
 8003be8:	e000      	b.n	8003bec <prvGetNextExpireTime+0x18>
 8003bea:	2200      	movs	r2, #0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bf8:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <prvGetNextExpireTime+0x44>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e001      	b.n	8003c08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c08:	68fb      	ldr	r3, [r7, #12]
    }
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000240 	.word	0x20000240

08003c1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c24:	f7ff fa8c 	bl	8003140 <xTaskGetTickCount>
 8003c28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <prvSampleTimeNow+0x3c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d205      	bcs.n	8003c40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c34:	f000 f91e 	bl	8003e74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e002      	b.n	8003c46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003c46:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <prvSampleTimeNow+0x3c>)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
    }
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000250 	.word	0x20000250

08003c5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d812      	bhi.n	8003ca8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	1ad2      	subs	r2, r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d302      	bcc.n	8003c96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e01b      	b.n	8003cce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c96:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <prvInsertTimerInActiveList+0x7c>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fe fab6 	bl	8002212 <vListInsert>
 8003ca6:	e012      	b.n	8003cce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d206      	bcs.n	8003cbe <prvInsertTimerInActiveList+0x62>
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d302      	bcc.n	8003cbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e007      	b.n	8003cce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cbe:	4b07      	ldr	r3, [pc, #28]	@ (8003cdc <prvInsertTimerInActiveList+0x80>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f7fe faa2 	bl	8002212 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003cce:	697b      	ldr	r3, [r7, #20]
    }
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000244 	.word	0x20000244
 8003cdc:	20000240 	.word	0x20000240

08003ce0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08c      	sub	sp, #48	@ 0x30
 8003ce4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ce6:	e0b2      	b.n	8003e4e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f2c0 80af 	blt.w	8003e4e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe fabf 	bl	8002284 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ff87 	bl	8003c1c <prvSampleTimeNow>
 8003d0e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	f200 8098 	bhi.w	8003e48 <prvProcessReceivedCommands+0x168>
 8003d18:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <prvProcessReceivedCommands+0x40>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d49 	.word	0x08003d49
 8003d2c:	08003dbf 	.word	0x08003dbf
 8003d30:	08003dd3 	.word	0x08003dd3
 8003d34:	08003e1f 	.word	0x08003e1f
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003d49 	.word	0x08003d49
 8003d40:	08003dbf 	.word	0x08003dbf
 8003d44:	08003dd3 	.word	0x08003dd3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	18d1      	adds	r1, r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a3a      	ldr	r2, [r7, #32]
 8003d66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d68:	f7ff ff78 	bl	8003c5c <prvInsertTimerInActiveList>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d06c      	beq.n	8003e4c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d78:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d061      	beq.n	8003e4c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	441a      	add	r2, r3
 8003d90:	2300      	movs	r3, #0
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	2300      	movs	r3, #0
 8003d96:	2100      	movs	r1, #0
 8003d98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d9a:	f7ff fe1d 	bl	80039d8 <xTimerGenericCommand>
 8003d9e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d152      	bne.n	8003e4c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	61bb      	str	r3, [r7, #24]
    }
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	e7fd      	b.n	8003dba <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003dd0:	e03d      	b.n	8003e4e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	617b      	str	r3, [r7, #20]
    }
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	18d1      	adds	r1, r2, r3
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e18:	f7ff ff20 	bl	8003c5c <prvInsertTimerInActiveList>
                        break;
 8003e1c:	e017      	b.n	8003e4e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d103      	bne.n	8003e34 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8003e2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e2e:	f000 fbf9 	bl	8004624 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e32:	e00c      	b.n	8003e4e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003e46:	e002      	b.n	8003e4e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <prvProcessReceivedCommands+0x16e>
                        break;
 8003e4c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e4e:	4b08      	ldr	r3, [pc, #32]	@ (8003e70 <prvProcessReceivedCommands+0x190>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f107 0108 	add.w	r1, r7, #8
 8003e56:	2200      	movs	r2, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fcdd 	bl	8002818 <xQueueReceive>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f47f af41 	bne.w	8003ce8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
 8003e6a:	3728      	adds	r7, #40	@ 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000248 	.word	0x20000248

08003e74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e7a:	e049      	b.n	8003f10 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f38 <prvSwitchTimerLists+0xc4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e86:	4b2c      	ldr	r3, [pc, #176]	@ (8003f38 <prvSwitchTimerLists+0xc4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe f9f5 	bl	8002284 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d02f      	beq.n	8003f10 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d90e      	bls.n	8003ee0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ece:	4b1a      	ldr	r3, [pc, #104]	@ (8003f38 <prvSwitchTimerLists+0xc4>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f7fe f99a 	bl	8002212 <vListInsert>
 8003ede:	e017      	b.n	8003f10 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	2100      	movs	r1, #0
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff fd74 	bl	80039d8 <xTimerGenericCommand>
 8003ef0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	603b      	str	r3, [r7, #0]
    }
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	e7fd      	b.n	8003f0c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f10:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <prvSwitchTimerLists+0xc4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1b0      	bne.n	8003e7c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f1a:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <prvSwitchTimerLists+0xc4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f20:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <prvSwitchTimerLists+0xc8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a04      	ldr	r2, [pc, #16]	@ (8003f38 <prvSwitchTimerLists+0xc4>)
 8003f26:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f28:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <prvSwitchTimerLists+0xc8>)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	6013      	str	r3, [r2, #0]
    }
 8003f2e:	bf00      	nop
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000240 	.word	0x20000240
 8003f3c:	20000244 	.word	0x20000244

08003f40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f44:	f000 f962 	bl	800420c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f48:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <prvCheckForValidListAndQueue+0x54>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11d      	bne.n	8003f8c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f50:	4811      	ldr	r0, [pc, #68]	@ (8003f98 <prvCheckForValidListAndQueue+0x58>)
 8003f52:	f7fe f90d 	bl	8002170 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f56:	4811      	ldr	r0, [pc, #68]	@ (8003f9c <prvCheckForValidListAndQueue+0x5c>)
 8003f58:	f7fe f90a 	bl	8002170 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f5c:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <prvCheckForValidListAndQueue+0x60>)
 8003f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f98 <prvCheckForValidListAndQueue+0x58>)
 8003f60:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f62:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <prvCheckForValidListAndQueue+0x64>)
 8003f64:	4a0d      	ldr	r2, [pc, #52]	@ (8003f9c <prvCheckForValidListAndQueue+0x5c>)
 8003f66:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003f68:	2200      	movs	r2, #0
 8003f6a:	210c      	movs	r1, #12
 8003f6c:	200a      	movs	r0, #10
 8003f6e:	f7fe fa1d 	bl	80023ac <xQueueGenericCreate>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4a07      	ldr	r2, [pc, #28]	@ (8003f94 <prvCheckForValidListAndQueue+0x54>)
 8003f76:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003f78:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <prvCheckForValidListAndQueue+0x54>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f80:	4b04      	ldr	r3, [pc, #16]	@ (8003f94 <prvCheckForValidListAndQueue+0x54>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4908      	ldr	r1, [pc, #32]	@ (8003fa8 <prvCheckForValidListAndQueue+0x68>)
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fe38 	bl	8002bfc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f8c:	f000 f970 	bl	8004270 <vPortExitCritical>
    }
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000248 	.word	0x20000248
 8003f98:	20000218 	.word	0x20000218
 8003f9c:	2000022c 	.word	0x2000022c
 8003fa0:	20000240 	.word	0x20000240
 8003fa4:	20000244 	.word	0x20000244
 8003fa8:	0800529c 	.word	0x0800529c

08003fac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f023 0201 	bic.w	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3b04      	subs	r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8004010 <pxPortInitialiseStack+0x64>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3b14      	subs	r3, #20
 8003fe6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3b04      	subs	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f06f 0202 	mvn.w	r2, #2
 8003ffa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b20      	subs	r3, #32
 8004000:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	08004015 	.word	0x08004015

08004014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800401e:	4b13      	ldr	r3, [pc, #76]	@ (800406c <prvTaskExitError+0x58>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004026:	d00b      	beq.n	8004040 <prvTaskExitError+0x2c>
        __asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	60fb      	str	r3, [r7, #12]
    }
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <prvTaskExitError+0x28>
        __asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60bb      	str	r3, [r7, #8]
    }
 8004052:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004054:	bf00      	nop
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0fc      	beq.n	8004056 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	2000000c 	.word	0x2000000c

08004070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004070:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <pxCurrentTCBConst2>)
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	6808      	ldr	r0, [r1, #0]
 8004076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407a:	f380 8809 	msr	PSP, r0
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8811 	msr	BASEPRI, r0
 800408a:	4770      	bx	lr
 800408c:	f3af 8000 	nop.w

08004090 <pxCurrentTCBConst2>:
 8004090:	20000114 	.word	0x20000114
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop

08004098 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004098:	4808      	ldr	r0, [pc, #32]	@ (80040bc <prvPortStartFirstTask+0x24>)
 800409a:	6800      	ldr	r0, [r0, #0]
 800409c:	6800      	ldr	r0, [r0, #0]
 800409e:	f380 8808 	msr	MSP, r0
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8814 	msr	CONTROL, r0
 80040aa:	b662      	cpsie	i
 80040ac:	b661      	cpsie	f
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	df00      	svc	0
 80040b8:	bf00      	nop
 80040ba:	0000      	.short	0x0000
 80040bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop

080040c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040ca:	4b47      	ldr	r3, [pc, #284]	@ (80041e8 <xPortStartScheduler+0x124>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a47      	ldr	r2, [pc, #284]	@ (80041ec <xPortStartScheduler+0x128>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10b      	bne.n	80040ec <xPortStartScheduler+0x28>
        __asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	60fb      	str	r3, [r7, #12]
    }
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040ec:	4b3e      	ldr	r3, [pc, #248]	@ (80041e8 <xPortStartScheduler+0x124>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a3f      	ldr	r2, [pc, #252]	@ (80041f0 <xPortStartScheduler+0x12c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10b      	bne.n	800410e <xPortStartScheduler+0x4a>
        __asm volatile
 80040f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	613b      	str	r3, [r7, #16]
    }
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	e7fd      	b.n	800410a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800410e:	4b39      	ldr	r3, [pc, #228]	@ (80041f4 <xPortStartScheduler+0x130>)
 8004110:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	22ff      	movs	r2, #255	@ 0xff
 800411e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004130:	b2da      	uxtb	r2, r3
 8004132:	4b31      	ldr	r3, [pc, #196]	@ (80041f8 <xPortStartScheduler+0x134>)
 8004134:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004136:	4b31      	ldr	r3, [pc, #196]	@ (80041fc <xPortStartScheduler+0x138>)
 8004138:	2207      	movs	r2, #7
 800413a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800413c:	e009      	b.n	8004152 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800413e:	4b2f      	ldr	r3, [pc, #188]	@ (80041fc <xPortStartScheduler+0x138>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3b01      	subs	r3, #1
 8004144:	4a2d      	ldr	r2, [pc, #180]	@ (80041fc <xPortStartScheduler+0x138>)
 8004146:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	b2db      	uxtb	r3, r3
 8004150:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415a:	2b80      	cmp	r3, #128	@ 0x80
 800415c:	d0ef      	beq.n	800413e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800415e:	4b27      	ldr	r3, [pc, #156]	@ (80041fc <xPortStartScheduler+0x138>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1c3 0307 	rsb	r3, r3, #7
 8004166:	2b04      	cmp	r3, #4
 8004168:	d00b      	beq.n	8004182 <xPortStartScheduler+0xbe>
        __asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	60bb      	str	r3, [r7, #8]
    }
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004182:	4b1e      	ldr	r3, [pc, #120]	@ (80041fc <xPortStartScheduler+0x138>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	4a1c      	ldr	r2, [pc, #112]	@ (80041fc <xPortStartScheduler+0x138>)
 800418a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800418c:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <xPortStartScheduler+0x138>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004194:	4a19      	ldr	r2, [pc, #100]	@ (80041fc <xPortStartScheduler+0x138>)
 8004196:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041a0:	4b17      	ldr	r3, [pc, #92]	@ (8004200 <xPortStartScheduler+0x13c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a16      	ldr	r2, [pc, #88]	@ (8004200 <xPortStartScheduler+0x13c>)
 80041a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041ac:	4b14      	ldr	r3, [pc, #80]	@ (8004200 <xPortStartScheduler+0x13c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a13      	ldr	r2, [pc, #76]	@ (8004200 <xPortStartScheduler+0x13c>)
 80041b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80041b6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041b8:	f000 f8e0 	bl	800437c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <xPortStartScheduler+0x140>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80041c2:	f000 f8ff 	bl	80043c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041c6:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <xPortStartScheduler+0x144>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004208 <xPortStartScheduler+0x144>)
 80041cc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80041d0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041d2:	f7ff ff61 	bl	8004098 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041d6:	f7ff f87d 	bl	80032d4 <vTaskSwitchContext>
    prvTaskExitError();
 80041da:	f7ff ff1b 	bl	8004014 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	e000ed00 	.word	0xe000ed00
 80041ec:	410fc271 	.word	0x410fc271
 80041f0:	410fc270 	.word	0x410fc270
 80041f4:	e000e400 	.word	0xe000e400
 80041f8:	20000254 	.word	0x20000254
 80041fc:	20000258 	.word	0x20000258
 8004200:	e000ed20 	.word	0xe000ed20
 8004204:	2000000c 	.word	0x2000000c
 8004208:	e000ef34 	.word	0xe000ef34

0800420c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
        __asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	607b      	str	r3, [r7, #4]
    }
 8004224:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004226:	4b10      	ldr	r3, [pc, #64]	@ (8004268 <vPortEnterCritical+0x5c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	4a0e      	ldr	r2, [pc, #56]	@ (8004268 <vPortEnterCritical+0x5c>)
 800422e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004230:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <vPortEnterCritical+0x5c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d110      	bne.n	800425a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004238:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <vPortEnterCritical+0x60>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <vPortEnterCritical+0x4e>
        __asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	603b      	str	r3, [r7, #0]
    }
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	e7fd      	b.n	8004256 <vPortEnterCritical+0x4a>
    }
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	2000000c 	.word	0x2000000c
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004276:	4b12      	ldr	r3, [pc, #72]	@ (80042c0 <vPortExitCritical+0x50>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <vPortExitCritical+0x26>
        __asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	607b      	str	r3, [r7, #4]
    }
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	e7fd      	b.n	8004292 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004296:	4b0a      	ldr	r3, [pc, #40]	@ (80042c0 <vPortExitCritical+0x50>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3b01      	subs	r3, #1
 800429c:	4a08      	ldr	r2, [pc, #32]	@ (80042c0 <vPortExitCritical+0x50>)
 800429e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80042a0:	4b07      	ldr	r3, [pc, #28]	@ (80042c0 <vPortExitCritical+0x50>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <vPortExitCritical+0x44>
 80042a8:	2300      	movs	r3, #0
 80042aa:	603b      	str	r3, [r7, #0]
        __asm volatile
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	f383 8811 	msr	BASEPRI, r3
    }
 80042b2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	2000000c 	.word	0x2000000c
	...

080042d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80042d0:	f3ef 8009 	mrs	r0, PSP
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	4b15      	ldr	r3, [pc, #84]	@ (8004330 <pxCurrentTCBConst>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f01e 0f10 	tst.w	lr, #16
 80042e0:	bf08      	it	eq
 80042e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ea:	6010      	str	r0, [r2, #0]
 80042ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80042f4:	f380 8811 	msr	BASEPRI, r0
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f7fe ffe8 	bl	80032d4 <vTaskSwitchContext>
 8004304:	f04f 0000 	mov.w	r0, #0
 8004308:	f380 8811 	msr	BASEPRI, r0
 800430c:	bc09      	pop	{r0, r3}
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	6808      	ldr	r0, [r1, #0]
 8004312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004316:	f01e 0f10 	tst.w	lr, #16
 800431a:	bf08      	it	eq
 800431c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004320:	f380 8809 	msr	PSP, r0
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	f3af 8000 	nop.w

08004330 <pxCurrentTCBConst>:
 8004330:	20000114 	.word	0x20000114
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop

08004338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
        __asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	607b      	str	r3, [r7, #4]
    }
 8004350:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004352:	f7fe ff05 	bl	8003160 <xTaskIncrementTick>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800435c:	4b06      	ldr	r3, [pc, #24]	@ (8004378 <SysTick_Handler+0x40>)
 800435e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	2300      	movs	r3, #0
 8004366:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f383 8811 	msr	BASEPRI, r3
    }
 800436e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <vPortSetupTimerInterrupt+0x34>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004386:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <vPortSetupTimerInterrupt+0x38>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800438c:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <vPortSetupTimerInterrupt+0x3c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <vPortSetupTimerInterrupt+0x40>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	4a09      	ldr	r2, [pc, #36]	@ (80043c0 <vPortSetupTimerInterrupt+0x44>)
 800439a:	3b01      	subs	r3, #1
 800439c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800439e:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <vPortSetupTimerInterrupt+0x34>)
 80043a0:	2207      	movs	r2, #7
 80043a2:	601a      	str	r2, [r3, #0]
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	e000e010 	.word	0xe000e010
 80043b4:	e000e018 	.word	0xe000e018
 80043b8:	20000000 	.word	0x20000000
 80043bc:	10624dd3 	.word	0x10624dd3
 80043c0:	e000e014 	.word	0xe000e014

080043c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80043c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80043d4 <vPortEnableVFP+0x10>
 80043c8:	6801      	ldr	r1, [r0, #0]
 80043ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80043ce:	6001      	str	r1, [r0, #0]
 80043d0:	4770      	bx	lr
 80043d2:	0000      	.short	0x0000
 80043d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop

080043dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80043e2:	f3ef 8305 	mrs	r3, IPSR
 80043e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b0f      	cmp	r3, #15
 80043ec:	d915      	bls.n	800441a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043ee:	4a18      	ldr	r2, [pc, #96]	@ (8004450 <vPortValidateInterruptPriority+0x74>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043f8:	4b16      	ldr	r3, [pc, #88]	@ (8004454 <vPortValidateInterruptPriority+0x78>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	7afa      	ldrb	r2, [r7, #11]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d20b      	bcs.n	800441a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	607b      	str	r3, [r7, #4]
    }
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	e7fd      	b.n	8004416 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800441a:	4b0f      	ldr	r3, [pc, #60]	@ (8004458 <vPortValidateInterruptPriority+0x7c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004422:	4b0e      	ldr	r3, [pc, #56]	@ (800445c <vPortValidateInterruptPriority+0x80>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d90b      	bls.n	8004442 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	603b      	str	r3, [r7, #0]
    }
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <vPortValidateInterruptPriority+0x62>
    }
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000e3f0 	.word	0xe000e3f0
 8004454:	20000254 	.word	0x20000254
 8004458:	e000ed0c 	.word	0xe000ed0c
 800445c:	20000258 	.word	0x20000258

08004460 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	@ 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800446c:	f7fe fdbc 	bl	8002fe8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004470:	4b66      	ldr	r3, [pc, #408]	@ (800460c <pvPortMalloc+0x1ac>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004478:	f000 f938 	bl	80046ec <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800447c:	4b64      	ldr	r3, [pc, #400]	@ (8004610 <pvPortMalloc+0x1b0>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 80a9 	bne.w	80045dc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d02e      	beq.n	80044ee <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004490:	2208      	movs	r2, #8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	429a      	cmp	r2, r3
 800449a:	d228      	bcs.n	80044ee <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800449c:	2208      	movs	r2, #8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d022      	beq.n	80044f4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f023 0307 	bic.w	r3, r3, #7
 80044b4:	3308      	adds	r3, #8
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d215      	bcs.n	80044e8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f023 0307 	bic.w	r3, r3, #7
 80044c2:	3308      	adds	r3, #8
 80044c4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d011      	beq.n	80044f4 <pvPortMalloc+0x94>
        __asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	617b      	str	r3, [r7, #20]
    }
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044ec:	e002      	b.n	80044f4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	e000      	b.n	80044f6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044f4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d06f      	beq.n	80045dc <pvPortMalloc+0x17c>
 80044fc:	4b45      	ldr	r3, [pc, #276]	@ (8004614 <pvPortMalloc+0x1b4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	429a      	cmp	r2, r3
 8004504:	d86a      	bhi.n	80045dc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004506:	4b44      	ldr	r3, [pc, #272]	@ (8004618 <pvPortMalloc+0x1b8>)
 8004508:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800450a:	4b43      	ldr	r3, [pc, #268]	@ (8004618 <pvPortMalloc+0x1b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004510:	e004      	b.n	800451c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d903      	bls.n	800452e <pvPortMalloc+0xce>
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f1      	bne.n	8004512 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800452e:	4b37      	ldr	r3, [pc, #220]	@ (800460c <pvPortMalloc+0x1ac>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004534:	429a      	cmp	r2, r3
 8004536:	d051      	beq.n	80045dc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2208      	movs	r2, #8
 800453e:	4413      	add	r3, r2
 8004540:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	1ad2      	subs	r2, r2, r3
 8004552:	2308      	movs	r3, #8
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	429a      	cmp	r2, r3
 8004558:	d920      	bls.n	800459c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800455a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4413      	add	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <pvPortMalloc+0x124>
        __asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	613b      	str	r3, [r7, #16]
    }
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	1ad2      	subs	r2, r2, r3
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004596:	69b8      	ldr	r0, [r7, #24]
 8004598:	f000 f90a 	bl	80047b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800459c:	4b1d      	ldr	r3, [pc, #116]	@ (8004614 <pvPortMalloc+0x1b4>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004614 <pvPortMalloc+0x1b4>)
 80045a8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004614 <pvPortMalloc+0x1b4>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <pvPortMalloc+0x1bc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d203      	bcs.n	80045be <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045b6:	4b17      	ldr	r3, [pc, #92]	@ (8004614 <pvPortMalloc+0x1b4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a18      	ldr	r2, [pc, #96]	@ (800461c <pvPortMalloc+0x1bc>)
 80045bc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <pvPortMalloc+0x1b0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80045d2:	4b13      	ldr	r3, [pc, #76]	@ (8004620 <pvPortMalloc+0x1c0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3301      	adds	r3, #1
 80045d8:	4a11      	ldr	r2, [pc, #68]	@ (8004620 <pvPortMalloc+0x1c0>)
 80045da:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80045dc:	f7fe fd12 	bl	8003004 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <pvPortMalloc+0x1a2>
        __asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	60fb      	str	r3, [r7, #12]
    }
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	e7fd      	b.n	80045fe <pvPortMalloc+0x19e>
    return pvReturn;
 8004602:	69fb      	ldr	r3, [r7, #28]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3728      	adds	r7, #40	@ 0x28
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20012e64 	.word	0x20012e64
 8004610:	20012e78 	.word	0x20012e78
 8004614:	20012e68 	.word	0x20012e68
 8004618:	20012e5c 	.word	0x20012e5c
 800461c:	20012e6c 	.word	0x20012e6c
 8004620:	20012e70 	.word	0x20012e70

08004624 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d04f      	beq.n	80046d6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004636:	2308      	movs	r3, #8
 8004638:	425b      	negs	r3, r3
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4413      	add	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	4b25      	ldr	r3, [pc, #148]	@ (80046e0 <vPortFree+0xbc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <vPortFree+0x46>
        __asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	60fb      	str	r3, [r7, #12]
    }
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	e7fd      	b.n	8004666 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <vPortFree+0x66>
        __asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	60bb      	str	r3, [r7, #8]
    }
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	e7fd      	b.n	8004686 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <vPortFree+0xbc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01e      	beq.n	80046d6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d11a      	bne.n	80046d6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	4b0e      	ldr	r3, [pc, #56]	@ (80046e0 <vPortFree+0xbc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	401a      	ands	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80046b0:	f7fe fc9a 	bl	8002fe8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	4b0a      	ldr	r3, [pc, #40]	@ (80046e4 <vPortFree+0xc0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4413      	add	r3, r2
 80046be:	4a09      	ldr	r2, [pc, #36]	@ (80046e4 <vPortFree+0xc0>)
 80046c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046c2:	6938      	ldr	r0, [r7, #16]
 80046c4:	f000 f874 	bl	80047b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80046c8:	4b07      	ldr	r3, [pc, #28]	@ (80046e8 <vPortFree+0xc4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	4a06      	ldr	r2, [pc, #24]	@ (80046e8 <vPortFree+0xc4>)
 80046d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80046d2:	f7fe fc97 	bl	8003004 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80046d6:	bf00      	nop
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20012e78 	.word	0x20012e78
 80046e4:	20012e68 	.word	0x20012e68
 80046e8:	20012e74 	.word	0x20012e74

080046ec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046f2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80046f6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80046f8:	4b27      	ldr	r3, [pc, #156]	@ (8004798 <prvHeapInit+0xac>)
 80046fa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00c      	beq.n	8004720 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3307      	adds	r3, #7
 800470a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0307 	bic.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	4a1f      	ldr	r2, [pc, #124]	@ (8004798 <prvHeapInit+0xac>)
 800471c:	4413      	add	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004724:	4a1d      	ldr	r2, [pc, #116]	@ (800479c <prvHeapInit+0xb0>)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800472a:	4b1c      	ldr	r3, [pc, #112]	@ (800479c <prvHeapInit+0xb0>)
 800472c:	2200      	movs	r2, #0
 800472e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	4413      	add	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004738:	2208      	movs	r2, #8
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0307 	bic.w	r3, r3, #7
 8004746:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a15      	ldr	r2, [pc, #84]	@ (80047a0 <prvHeapInit+0xb4>)
 800474c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800474e:	4b14      	ldr	r3, [pc, #80]	@ (80047a0 <prvHeapInit+0xb4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2200      	movs	r2, #0
 8004754:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004756:	4b12      	ldr	r3, [pc, #72]	@ (80047a0 <prvHeapInit+0xb4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	1ad2      	subs	r2, r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800476c:	4b0c      	ldr	r3, [pc, #48]	@ (80047a0 <prvHeapInit+0xb4>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a0a      	ldr	r2, [pc, #40]	@ (80047a4 <prvHeapInit+0xb8>)
 800477a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a09      	ldr	r2, [pc, #36]	@ (80047a8 <prvHeapInit+0xbc>)
 8004782:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004784:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <prvHeapInit+0xc0>)
 8004786:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800478a:	601a      	str	r2, [r3, #0]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	2000025c 	.word	0x2000025c
 800479c:	20012e5c 	.word	0x20012e5c
 80047a0:	20012e64 	.word	0x20012e64
 80047a4:	20012e6c 	.word	0x20012e6c
 80047a8:	20012e68 	.word	0x20012e68
 80047ac:	20012e78 	.word	0x20012e78

080047b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047b8:	4b28      	ldr	r3, [pc, #160]	@ (800485c <prvInsertBlockIntoFreeList+0xac>)
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e002      	b.n	80047c4 <prvInsertBlockIntoFreeList+0x14>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d8f7      	bhi.n	80047be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4413      	add	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d108      	bne.n	80047f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	441a      	add	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	441a      	add	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d118      	bne.n	8004838 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b15      	ldr	r3, [pc, #84]	@ (8004860 <prvInsertBlockIntoFreeList+0xb0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d00d      	beq.n	800482e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	441a      	add	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	e008      	b.n	8004840 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800482e:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <prvInsertBlockIntoFreeList+0xb0>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	e003      	b.n	8004840 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	d002      	beq.n	800484e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20012e5c 	.word	0x20012e5c
 8004860:	20012e64 	.word	0x20012e64

08004864 <std>:
 8004864:	2300      	movs	r3, #0
 8004866:	b510      	push	{r4, lr}
 8004868:	4604      	mov	r4, r0
 800486a:	e9c0 3300 	strd	r3, r3, [r0]
 800486e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004872:	6083      	str	r3, [r0, #8]
 8004874:	8181      	strh	r1, [r0, #12]
 8004876:	6643      	str	r3, [r0, #100]	@ 0x64
 8004878:	81c2      	strh	r2, [r0, #14]
 800487a:	6183      	str	r3, [r0, #24]
 800487c:	4619      	mov	r1, r3
 800487e:	2208      	movs	r2, #8
 8004880:	305c      	adds	r0, #92	@ 0x5c
 8004882:	f000 f9e7 	bl	8004c54 <memset>
 8004886:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <std+0x58>)
 8004888:	6263      	str	r3, [r4, #36]	@ 0x24
 800488a:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <std+0x5c>)
 800488c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <std+0x60>)
 8004890:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <std+0x64>)
 8004894:	6323      	str	r3, [r4, #48]	@ 0x30
 8004896:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <std+0x68>)
 8004898:	6224      	str	r4, [r4, #32]
 800489a:	429c      	cmp	r4, r3
 800489c:	d006      	beq.n	80048ac <std+0x48>
 800489e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048a2:	4294      	cmp	r4, r2
 80048a4:	d002      	beq.n	80048ac <std+0x48>
 80048a6:	33d0      	adds	r3, #208	@ 0xd0
 80048a8:	429c      	cmp	r4, r3
 80048aa:	d105      	bne.n	80048b8 <std+0x54>
 80048ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b4:	f000 ba40 	b.w	8004d38 <__retarget_lock_init_recursive>
 80048b8:	bd10      	pop	{r4, pc}
 80048ba:	bf00      	nop
 80048bc:	08004aa5 	.word	0x08004aa5
 80048c0:	08004ac7 	.word	0x08004ac7
 80048c4:	08004aff 	.word	0x08004aff
 80048c8:	08004b23 	.word	0x08004b23
 80048cc:	20012e7c 	.word	0x20012e7c

080048d0 <stdio_exit_handler>:
 80048d0:	4a02      	ldr	r2, [pc, #8]	@ (80048dc <stdio_exit_handler+0xc>)
 80048d2:	4903      	ldr	r1, [pc, #12]	@ (80048e0 <stdio_exit_handler+0x10>)
 80048d4:	4803      	ldr	r0, [pc, #12]	@ (80048e4 <stdio_exit_handler+0x14>)
 80048d6:	f000 b869 	b.w	80049ac <_fwalk_sglue>
 80048da:	bf00      	nop
 80048dc:	20000010 	.word	0x20000010
 80048e0:	08005055 	.word	0x08005055
 80048e4:	20000020 	.word	0x20000020

080048e8 <cleanup_stdio>:
 80048e8:	6841      	ldr	r1, [r0, #4]
 80048ea:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <cleanup_stdio+0x34>)
 80048ec:	4299      	cmp	r1, r3
 80048ee:	b510      	push	{r4, lr}
 80048f0:	4604      	mov	r4, r0
 80048f2:	d001      	beq.n	80048f8 <cleanup_stdio+0x10>
 80048f4:	f000 fbae 	bl	8005054 <_fflush_r>
 80048f8:	68a1      	ldr	r1, [r4, #8]
 80048fa:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <cleanup_stdio+0x38>)
 80048fc:	4299      	cmp	r1, r3
 80048fe:	d002      	beq.n	8004906 <cleanup_stdio+0x1e>
 8004900:	4620      	mov	r0, r4
 8004902:	f000 fba7 	bl	8005054 <_fflush_r>
 8004906:	68e1      	ldr	r1, [r4, #12]
 8004908:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <cleanup_stdio+0x3c>)
 800490a:	4299      	cmp	r1, r3
 800490c:	d004      	beq.n	8004918 <cleanup_stdio+0x30>
 800490e:	4620      	mov	r0, r4
 8004910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004914:	f000 bb9e 	b.w	8005054 <_fflush_r>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	bf00      	nop
 800491c:	20012e7c 	.word	0x20012e7c
 8004920:	20012ee4 	.word	0x20012ee4
 8004924:	20012f4c 	.word	0x20012f4c

08004928 <global_stdio_init.part.0>:
 8004928:	b510      	push	{r4, lr}
 800492a:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <global_stdio_init.part.0+0x30>)
 800492c:	4c0b      	ldr	r4, [pc, #44]	@ (800495c <global_stdio_init.part.0+0x34>)
 800492e:	4a0c      	ldr	r2, [pc, #48]	@ (8004960 <global_stdio_init.part.0+0x38>)
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	4620      	mov	r0, r4
 8004934:	2200      	movs	r2, #0
 8004936:	2104      	movs	r1, #4
 8004938:	f7ff ff94 	bl	8004864 <std>
 800493c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004940:	2201      	movs	r2, #1
 8004942:	2109      	movs	r1, #9
 8004944:	f7ff ff8e 	bl	8004864 <std>
 8004948:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800494c:	2202      	movs	r2, #2
 800494e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004952:	2112      	movs	r1, #18
 8004954:	f7ff bf86 	b.w	8004864 <std>
 8004958:	20012fb4 	.word	0x20012fb4
 800495c:	20012e7c 	.word	0x20012e7c
 8004960:	080048d1 	.word	0x080048d1

08004964 <__sfp_lock_acquire>:
 8004964:	4801      	ldr	r0, [pc, #4]	@ (800496c <__sfp_lock_acquire+0x8>)
 8004966:	f000 b9e8 	b.w	8004d3a <__retarget_lock_acquire_recursive>
 800496a:	bf00      	nop
 800496c:	20012fbd 	.word	0x20012fbd

08004970 <__sfp_lock_release>:
 8004970:	4801      	ldr	r0, [pc, #4]	@ (8004978 <__sfp_lock_release+0x8>)
 8004972:	f000 b9e3 	b.w	8004d3c <__retarget_lock_release_recursive>
 8004976:	bf00      	nop
 8004978:	20012fbd 	.word	0x20012fbd

0800497c <__sinit>:
 800497c:	b510      	push	{r4, lr}
 800497e:	4604      	mov	r4, r0
 8004980:	f7ff fff0 	bl	8004964 <__sfp_lock_acquire>
 8004984:	6a23      	ldr	r3, [r4, #32]
 8004986:	b11b      	cbz	r3, 8004990 <__sinit+0x14>
 8004988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800498c:	f7ff bff0 	b.w	8004970 <__sfp_lock_release>
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <__sinit+0x28>)
 8004992:	6223      	str	r3, [r4, #32]
 8004994:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <__sinit+0x2c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f5      	bne.n	8004988 <__sinit+0xc>
 800499c:	f7ff ffc4 	bl	8004928 <global_stdio_init.part.0>
 80049a0:	e7f2      	b.n	8004988 <__sinit+0xc>
 80049a2:	bf00      	nop
 80049a4:	080048e9 	.word	0x080048e9
 80049a8:	20012fb4 	.word	0x20012fb4

080049ac <_fwalk_sglue>:
 80049ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b0:	4607      	mov	r7, r0
 80049b2:	4688      	mov	r8, r1
 80049b4:	4614      	mov	r4, r2
 80049b6:	2600      	movs	r6, #0
 80049b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049bc:	f1b9 0901 	subs.w	r9, r9, #1
 80049c0:	d505      	bpl.n	80049ce <_fwalk_sglue+0x22>
 80049c2:	6824      	ldr	r4, [r4, #0]
 80049c4:	2c00      	cmp	r4, #0
 80049c6:	d1f7      	bne.n	80049b8 <_fwalk_sglue+0xc>
 80049c8:	4630      	mov	r0, r6
 80049ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d907      	bls.n	80049e4 <_fwalk_sglue+0x38>
 80049d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049d8:	3301      	adds	r3, #1
 80049da:	d003      	beq.n	80049e4 <_fwalk_sglue+0x38>
 80049dc:	4629      	mov	r1, r5
 80049de:	4638      	mov	r0, r7
 80049e0:	47c0      	blx	r8
 80049e2:	4306      	orrs	r6, r0
 80049e4:	3568      	adds	r5, #104	@ 0x68
 80049e6:	e7e9      	b.n	80049bc <_fwalk_sglue+0x10>

080049e8 <_puts_r>:
 80049e8:	6a03      	ldr	r3, [r0, #32]
 80049ea:	b570      	push	{r4, r5, r6, lr}
 80049ec:	6884      	ldr	r4, [r0, #8]
 80049ee:	4605      	mov	r5, r0
 80049f0:	460e      	mov	r6, r1
 80049f2:	b90b      	cbnz	r3, 80049f8 <_puts_r+0x10>
 80049f4:	f7ff ffc2 	bl	800497c <__sinit>
 80049f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049fa:	07db      	lsls	r3, r3, #31
 80049fc:	d405      	bmi.n	8004a0a <_puts_r+0x22>
 80049fe:	89a3      	ldrh	r3, [r4, #12]
 8004a00:	0598      	lsls	r0, r3, #22
 8004a02:	d402      	bmi.n	8004a0a <_puts_r+0x22>
 8004a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a06:	f000 f998 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	0719      	lsls	r1, r3, #28
 8004a0e:	d502      	bpl.n	8004a16 <_puts_r+0x2e>
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d135      	bne.n	8004a82 <_puts_r+0x9a>
 8004a16:	4621      	mov	r1, r4
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f000 f8c5 	bl	8004ba8 <__swsetup_r>
 8004a1e:	b380      	cbz	r0, 8004a82 <_puts_r+0x9a>
 8004a20:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004a24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a26:	07da      	lsls	r2, r3, #31
 8004a28:	d405      	bmi.n	8004a36 <_puts_r+0x4e>
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	059b      	lsls	r3, r3, #22
 8004a2e:	d402      	bmi.n	8004a36 <_puts_r+0x4e>
 8004a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a32:	f000 f983 	bl	8004d3c <__retarget_lock_release_recursive>
 8004a36:	4628      	mov	r0, r5
 8004a38:	bd70      	pop	{r4, r5, r6, pc}
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	da04      	bge.n	8004a48 <_puts_r+0x60>
 8004a3e:	69a2      	ldr	r2, [r4, #24]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	dc17      	bgt.n	8004a74 <_puts_r+0x8c>
 8004a44:	290a      	cmp	r1, #10
 8004a46:	d015      	beq.n	8004a74 <_puts_r+0x8c>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	6022      	str	r2, [r4, #0]
 8004a4e:	7019      	strb	r1, [r3, #0]
 8004a50:	68a3      	ldr	r3, [r4, #8]
 8004a52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a56:	3b01      	subs	r3, #1
 8004a58:	60a3      	str	r3, [r4, #8]
 8004a5a:	2900      	cmp	r1, #0
 8004a5c:	d1ed      	bne.n	8004a3a <_puts_r+0x52>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	da11      	bge.n	8004a86 <_puts_r+0x9e>
 8004a62:	4622      	mov	r2, r4
 8004a64:	210a      	movs	r1, #10
 8004a66:	4628      	mov	r0, r5
 8004a68:	f000 f85f 	bl	8004b2a <__swbuf_r>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d0d7      	beq.n	8004a20 <_puts_r+0x38>
 8004a70:	250a      	movs	r5, #10
 8004a72:	e7d7      	b.n	8004a24 <_puts_r+0x3c>
 8004a74:	4622      	mov	r2, r4
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 f857 	bl	8004b2a <__swbuf_r>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d1e7      	bne.n	8004a50 <_puts_r+0x68>
 8004a80:	e7ce      	b.n	8004a20 <_puts_r+0x38>
 8004a82:	3e01      	subs	r6, #1
 8004a84:	e7e4      	b.n	8004a50 <_puts_r+0x68>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	6022      	str	r2, [r4, #0]
 8004a8c:	220a      	movs	r2, #10
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	e7ee      	b.n	8004a70 <_puts_r+0x88>
	...

08004a94 <puts>:
 8004a94:	4b02      	ldr	r3, [pc, #8]	@ (8004aa0 <puts+0xc>)
 8004a96:	4601      	mov	r1, r0
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	f7ff bfa5 	b.w	80049e8 <_puts_r>
 8004a9e:	bf00      	nop
 8004aa0:	2000001c 	.word	0x2000001c

08004aa4 <__sread>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aac:	f000 f8fc 	bl	8004ca8 <_read_r>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	bfab      	itete	ge
 8004ab4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ab8:	181b      	addge	r3, r3, r0
 8004aba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004abe:	bfac      	ite	ge
 8004ac0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ac2:	81a3      	strhlt	r3, [r4, #12]
 8004ac4:	bd10      	pop	{r4, pc}

08004ac6 <__swrite>:
 8004ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aca:	461f      	mov	r7, r3
 8004acc:	898b      	ldrh	r3, [r1, #12]
 8004ace:	05db      	lsls	r3, r3, #23
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	4616      	mov	r6, r2
 8004ad6:	d505      	bpl.n	8004ae4 <__swrite+0x1e>
 8004ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004adc:	2302      	movs	r3, #2
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f000 f8d0 	bl	8004c84 <_lseek_r>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	4632      	mov	r2, r6
 8004af2:	463b      	mov	r3, r7
 8004af4:	4628      	mov	r0, r5
 8004af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004afa:	f000 b8e7 	b.w	8004ccc <_write_r>

08004afe <__sseek>:
 8004afe:	b510      	push	{r4, lr}
 8004b00:	460c      	mov	r4, r1
 8004b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b06:	f000 f8bd 	bl	8004c84 <_lseek_r>
 8004b0a:	1c43      	adds	r3, r0, #1
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	bf15      	itete	ne
 8004b10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b1a:	81a3      	strheq	r3, [r4, #12]
 8004b1c:	bf18      	it	ne
 8004b1e:	81a3      	strhne	r3, [r4, #12]
 8004b20:	bd10      	pop	{r4, pc}

08004b22 <__sclose>:
 8004b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b26:	f000 b89d 	b.w	8004c64 <_close_r>

08004b2a <__swbuf_r>:
 8004b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2c:	460e      	mov	r6, r1
 8004b2e:	4614      	mov	r4, r2
 8004b30:	4605      	mov	r5, r0
 8004b32:	b118      	cbz	r0, 8004b3c <__swbuf_r+0x12>
 8004b34:	6a03      	ldr	r3, [r0, #32]
 8004b36:	b90b      	cbnz	r3, 8004b3c <__swbuf_r+0x12>
 8004b38:	f7ff ff20 	bl	800497c <__sinit>
 8004b3c:	69a3      	ldr	r3, [r4, #24]
 8004b3e:	60a3      	str	r3, [r4, #8]
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	071a      	lsls	r2, r3, #28
 8004b44:	d501      	bpl.n	8004b4a <__swbuf_r+0x20>
 8004b46:	6923      	ldr	r3, [r4, #16]
 8004b48:	b943      	cbnz	r3, 8004b5c <__swbuf_r+0x32>
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 f82b 	bl	8004ba8 <__swsetup_r>
 8004b52:	b118      	cbz	r0, 8004b5c <__swbuf_r+0x32>
 8004b54:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004b58:	4638      	mov	r0, r7
 8004b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	6922      	ldr	r2, [r4, #16]
 8004b60:	1a98      	subs	r0, r3, r2
 8004b62:	6963      	ldr	r3, [r4, #20]
 8004b64:	b2f6      	uxtb	r6, r6
 8004b66:	4283      	cmp	r3, r0
 8004b68:	4637      	mov	r7, r6
 8004b6a:	dc05      	bgt.n	8004b78 <__swbuf_r+0x4e>
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 fa70 	bl	8005054 <_fflush_r>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d1ed      	bne.n	8004b54 <__swbuf_r+0x2a>
 8004b78:	68a3      	ldr	r3, [r4, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60a3      	str	r3, [r4, #8]
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	701e      	strb	r6, [r3, #0]
 8004b86:	6962      	ldr	r2, [r4, #20]
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d004      	beq.n	8004b98 <__swbuf_r+0x6e>
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	07db      	lsls	r3, r3, #31
 8004b92:	d5e1      	bpl.n	8004b58 <__swbuf_r+0x2e>
 8004b94:	2e0a      	cmp	r6, #10
 8004b96:	d1df      	bne.n	8004b58 <__swbuf_r+0x2e>
 8004b98:	4621      	mov	r1, r4
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f000 fa5a 	bl	8005054 <_fflush_r>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d0d9      	beq.n	8004b58 <__swbuf_r+0x2e>
 8004ba4:	e7d6      	b.n	8004b54 <__swbuf_r+0x2a>
	...

08004ba8 <__swsetup_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4b29      	ldr	r3, [pc, #164]	@ (8004c50 <__swsetup_r+0xa8>)
 8004bac:	4605      	mov	r5, r0
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	b118      	cbz	r0, 8004bbc <__swsetup_r+0x14>
 8004bb4:	6a03      	ldr	r3, [r0, #32]
 8004bb6:	b90b      	cbnz	r3, 8004bbc <__swsetup_r+0x14>
 8004bb8:	f7ff fee0 	bl	800497c <__sinit>
 8004bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc0:	0719      	lsls	r1, r3, #28
 8004bc2:	d422      	bmi.n	8004c0a <__swsetup_r+0x62>
 8004bc4:	06da      	lsls	r2, r3, #27
 8004bc6:	d407      	bmi.n	8004bd8 <__swsetup_r+0x30>
 8004bc8:	2209      	movs	r2, #9
 8004bca:	602a      	str	r2, [r5, #0]
 8004bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bd6:	e033      	b.n	8004c40 <__swsetup_r+0x98>
 8004bd8:	0758      	lsls	r0, r3, #29
 8004bda:	d512      	bpl.n	8004c02 <__swsetup_r+0x5a>
 8004bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bde:	b141      	cbz	r1, 8004bf2 <__swsetup_r+0x4a>
 8004be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004be4:	4299      	cmp	r1, r3
 8004be6:	d002      	beq.n	8004bee <__swsetup_r+0x46>
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 f8b7 	bl	8004d5c <_free_r>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bf2:	89a3      	ldrh	r3, [r4, #12]
 8004bf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6063      	str	r3, [r4, #4]
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f043 0308 	orr.w	r3, r3, #8
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	6923      	ldr	r3, [r4, #16]
 8004c0c:	b94b      	cbnz	r3, 8004c22 <__swsetup_r+0x7a>
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c18:	d003      	beq.n	8004c22 <__swsetup_r+0x7a>
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f000 fa67 	bl	80050f0 <__smakebuf_r>
 8004c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c26:	f013 0201 	ands.w	r2, r3, #1
 8004c2a:	d00a      	beq.n	8004c42 <__swsetup_r+0x9a>
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	60a2      	str	r2, [r4, #8]
 8004c30:	6962      	ldr	r2, [r4, #20]
 8004c32:	4252      	negs	r2, r2
 8004c34:	61a2      	str	r2, [r4, #24]
 8004c36:	6922      	ldr	r2, [r4, #16]
 8004c38:	b942      	cbnz	r2, 8004c4c <__swsetup_r+0xa4>
 8004c3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c3e:	d1c5      	bne.n	8004bcc <__swsetup_r+0x24>
 8004c40:	bd38      	pop	{r3, r4, r5, pc}
 8004c42:	0799      	lsls	r1, r3, #30
 8004c44:	bf58      	it	pl
 8004c46:	6962      	ldrpl	r2, [r4, #20]
 8004c48:	60a2      	str	r2, [r4, #8]
 8004c4a:	e7f4      	b.n	8004c36 <__swsetup_r+0x8e>
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e7f7      	b.n	8004c40 <__swsetup_r+0x98>
 8004c50:	2000001c 	.word	0x2000001c

08004c54 <memset>:
 8004c54:	4402      	add	r2, r0
 8004c56:	4603      	mov	r3, r0
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d100      	bne.n	8004c5e <memset+0xa>
 8004c5c:	4770      	bx	lr
 8004c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c62:	e7f9      	b.n	8004c58 <memset+0x4>

08004c64 <_close_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d06      	ldr	r5, [pc, #24]	@ (8004c80 <_close_r+0x1c>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	f7fb ffdb 	bl	8000c2a <_close>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_close_r+0x1a>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_close_r+0x1a>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20012fb8 	.word	0x20012fb8

08004c84 <_lseek_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4d07      	ldr	r5, [pc, #28]	@ (8004ca4 <_lseek_r+0x20>)
 8004c88:	4604      	mov	r4, r0
 8004c8a:	4608      	mov	r0, r1
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	2200      	movs	r2, #0
 8004c90:	602a      	str	r2, [r5, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	f7fb fff0 	bl	8000c78 <_lseek>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_lseek_r+0x1e>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_lseek_r+0x1e>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	20012fb8 	.word	0x20012fb8

08004ca8 <_read_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d07      	ldr	r5, [pc, #28]	@ (8004cc8 <_read_r+0x20>)
 8004cac:	4604      	mov	r4, r0
 8004cae:	4608      	mov	r0, r1
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	602a      	str	r2, [r5, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f7fb ff7e 	bl	8000bb8 <_read>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_read_r+0x1e>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_read_r+0x1e>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	20012fb8 	.word	0x20012fb8

08004ccc <_write_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4d07      	ldr	r5, [pc, #28]	@ (8004cec <_write_r+0x20>)
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	4608      	mov	r0, r1
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	602a      	str	r2, [r5, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f7fb ff89 	bl	8000bf2 <_write>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_write_r+0x1e>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_write_r+0x1e>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20012fb8 	.word	0x20012fb8

08004cf0 <__libc_init_array>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004d28 <__libc_init_array+0x38>)
 8004cf4:	4c0d      	ldr	r4, [pc, #52]	@ (8004d2c <__libc_init_array+0x3c>)
 8004cf6:	1b64      	subs	r4, r4, r5
 8004cf8:	10a4      	asrs	r4, r4, #2
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	42a6      	cmp	r6, r4
 8004cfe:	d109      	bne.n	8004d14 <__libc_init_array+0x24>
 8004d00:	4d0b      	ldr	r5, [pc, #44]	@ (8004d30 <__libc_init_array+0x40>)
 8004d02:	4c0c      	ldr	r4, [pc, #48]	@ (8004d34 <__libc_init_array+0x44>)
 8004d04:	f000 fa70 	bl	80051e8 <_init>
 8004d08:	1b64      	subs	r4, r4, r5
 8004d0a:	10a4      	asrs	r4, r4, #2
 8004d0c:	2600      	movs	r6, #0
 8004d0e:	42a6      	cmp	r6, r4
 8004d10:	d105      	bne.n	8004d1e <__libc_init_array+0x2e>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d18:	4798      	blx	r3
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7ee      	b.n	8004cfc <__libc_init_array+0xc>
 8004d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d22:	4798      	blx	r3
 8004d24:	3601      	adds	r6, #1
 8004d26:	e7f2      	b.n	8004d0e <__libc_init_array+0x1e>
 8004d28:	080052c8 	.word	0x080052c8
 8004d2c:	080052c8 	.word	0x080052c8
 8004d30:	080052c8 	.word	0x080052c8
 8004d34:	080052cc 	.word	0x080052cc

08004d38 <__retarget_lock_init_recursive>:
 8004d38:	4770      	bx	lr

08004d3a <__retarget_lock_acquire_recursive>:
 8004d3a:	4770      	bx	lr

08004d3c <__retarget_lock_release_recursive>:
 8004d3c:	4770      	bx	lr

08004d3e <memcpy>:
 8004d3e:	440a      	add	r2, r1
 8004d40:	4291      	cmp	r1, r2
 8004d42:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d46:	d100      	bne.n	8004d4a <memcpy+0xc>
 8004d48:	4770      	bx	lr
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d54:	4291      	cmp	r1, r2
 8004d56:	d1f9      	bne.n	8004d4c <memcpy+0xe>
 8004d58:	bd10      	pop	{r4, pc}
	...

08004d5c <_free_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4605      	mov	r5, r0
 8004d60:	2900      	cmp	r1, #0
 8004d62:	d041      	beq.n	8004de8 <_free_r+0x8c>
 8004d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d68:	1f0c      	subs	r4, r1, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bfb8      	it	lt
 8004d6e:	18e4      	addlt	r4, r4, r3
 8004d70:	f000 f8e0 	bl	8004f34 <__malloc_lock>
 8004d74:	4a1d      	ldr	r2, [pc, #116]	@ (8004dec <_free_r+0x90>)
 8004d76:	6813      	ldr	r3, [r2, #0]
 8004d78:	b933      	cbnz	r3, 8004d88 <_free_r+0x2c>
 8004d7a:	6063      	str	r3, [r4, #4]
 8004d7c:	6014      	str	r4, [r2, #0]
 8004d7e:	4628      	mov	r0, r5
 8004d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d84:	f000 b8dc 	b.w	8004f40 <__malloc_unlock>
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	d908      	bls.n	8004d9e <_free_r+0x42>
 8004d8c:	6820      	ldr	r0, [r4, #0]
 8004d8e:	1821      	adds	r1, r4, r0
 8004d90:	428b      	cmp	r3, r1
 8004d92:	bf01      	itttt	eq
 8004d94:	6819      	ldreq	r1, [r3, #0]
 8004d96:	685b      	ldreq	r3, [r3, #4]
 8004d98:	1809      	addeq	r1, r1, r0
 8004d9a:	6021      	streq	r1, [r4, #0]
 8004d9c:	e7ed      	b.n	8004d7a <_free_r+0x1e>
 8004d9e:	461a      	mov	r2, r3
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	b10b      	cbz	r3, 8004da8 <_free_r+0x4c>
 8004da4:	42a3      	cmp	r3, r4
 8004da6:	d9fa      	bls.n	8004d9e <_free_r+0x42>
 8004da8:	6811      	ldr	r1, [r2, #0]
 8004daa:	1850      	adds	r0, r2, r1
 8004dac:	42a0      	cmp	r0, r4
 8004dae:	d10b      	bne.n	8004dc8 <_free_r+0x6c>
 8004db0:	6820      	ldr	r0, [r4, #0]
 8004db2:	4401      	add	r1, r0
 8004db4:	1850      	adds	r0, r2, r1
 8004db6:	4283      	cmp	r3, r0
 8004db8:	6011      	str	r1, [r2, #0]
 8004dba:	d1e0      	bne.n	8004d7e <_free_r+0x22>
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	6053      	str	r3, [r2, #4]
 8004dc2:	4408      	add	r0, r1
 8004dc4:	6010      	str	r0, [r2, #0]
 8004dc6:	e7da      	b.n	8004d7e <_free_r+0x22>
 8004dc8:	d902      	bls.n	8004dd0 <_free_r+0x74>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	e7d6      	b.n	8004d7e <_free_r+0x22>
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	1821      	adds	r1, r4, r0
 8004dd4:	428b      	cmp	r3, r1
 8004dd6:	bf04      	itt	eq
 8004dd8:	6819      	ldreq	r1, [r3, #0]
 8004dda:	685b      	ldreq	r3, [r3, #4]
 8004ddc:	6063      	str	r3, [r4, #4]
 8004dde:	bf04      	itt	eq
 8004de0:	1809      	addeq	r1, r1, r0
 8004de2:	6021      	streq	r1, [r4, #0]
 8004de4:	6054      	str	r4, [r2, #4]
 8004de6:	e7ca      	b.n	8004d7e <_free_r+0x22>
 8004de8:	bd38      	pop	{r3, r4, r5, pc}
 8004dea:	bf00      	nop
 8004dec:	20012fc4 	.word	0x20012fc4

08004df0 <sbrk_aligned>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	4e0f      	ldr	r6, [pc, #60]	@ (8004e30 <sbrk_aligned+0x40>)
 8004df4:	460c      	mov	r4, r1
 8004df6:	6831      	ldr	r1, [r6, #0]
 8004df8:	4605      	mov	r5, r0
 8004dfa:	b911      	cbnz	r1, 8004e02 <sbrk_aligned+0x12>
 8004dfc:	f000 f9d6 	bl	80051ac <_sbrk_r>
 8004e00:	6030      	str	r0, [r6, #0]
 8004e02:	4621      	mov	r1, r4
 8004e04:	4628      	mov	r0, r5
 8004e06:	f000 f9d1 	bl	80051ac <_sbrk_r>
 8004e0a:	1c43      	adds	r3, r0, #1
 8004e0c:	d103      	bne.n	8004e16 <sbrk_aligned+0x26>
 8004e0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004e12:	4620      	mov	r0, r4
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
 8004e16:	1cc4      	adds	r4, r0, #3
 8004e18:	f024 0403 	bic.w	r4, r4, #3
 8004e1c:	42a0      	cmp	r0, r4
 8004e1e:	d0f8      	beq.n	8004e12 <sbrk_aligned+0x22>
 8004e20:	1a21      	subs	r1, r4, r0
 8004e22:	4628      	mov	r0, r5
 8004e24:	f000 f9c2 	bl	80051ac <_sbrk_r>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d1f2      	bne.n	8004e12 <sbrk_aligned+0x22>
 8004e2c:	e7ef      	b.n	8004e0e <sbrk_aligned+0x1e>
 8004e2e:	bf00      	nop
 8004e30:	20012fc0 	.word	0x20012fc0

08004e34 <_malloc_r>:
 8004e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e38:	1ccd      	adds	r5, r1, #3
 8004e3a:	f025 0503 	bic.w	r5, r5, #3
 8004e3e:	3508      	adds	r5, #8
 8004e40:	2d0c      	cmp	r5, #12
 8004e42:	bf38      	it	cc
 8004e44:	250c      	movcc	r5, #12
 8004e46:	2d00      	cmp	r5, #0
 8004e48:	4606      	mov	r6, r0
 8004e4a:	db01      	blt.n	8004e50 <_malloc_r+0x1c>
 8004e4c:	42a9      	cmp	r1, r5
 8004e4e:	d904      	bls.n	8004e5a <_malloc_r+0x26>
 8004e50:	230c      	movs	r3, #12
 8004e52:	6033      	str	r3, [r6, #0]
 8004e54:	2000      	movs	r0, #0
 8004e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f30 <_malloc_r+0xfc>
 8004e5e:	f000 f869 	bl	8004f34 <__malloc_lock>
 8004e62:	f8d8 3000 	ldr.w	r3, [r8]
 8004e66:	461c      	mov	r4, r3
 8004e68:	bb44      	cbnz	r4, 8004ebc <_malloc_r+0x88>
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f7ff ffbf 	bl	8004df0 <sbrk_aligned>
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	4604      	mov	r4, r0
 8004e76:	d158      	bne.n	8004f2a <_malloc_r+0xf6>
 8004e78:	f8d8 4000 	ldr.w	r4, [r8]
 8004e7c:	4627      	mov	r7, r4
 8004e7e:	2f00      	cmp	r7, #0
 8004e80:	d143      	bne.n	8004f0a <_malloc_r+0xd6>
 8004e82:	2c00      	cmp	r4, #0
 8004e84:	d04b      	beq.n	8004f1e <_malloc_r+0xea>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	4639      	mov	r1, r7
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	eb04 0903 	add.w	r9, r4, r3
 8004e90:	f000 f98c 	bl	80051ac <_sbrk_r>
 8004e94:	4581      	cmp	r9, r0
 8004e96:	d142      	bne.n	8004f1e <_malloc_r+0xea>
 8004e98:	6821      	ldr	r1, [r4, #0]
 8004e9a:	1a6d      	subs	r5, r5, r1
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	f7ff ffa6 	bl	8004df0 <sbrk_aligned>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d03a      	beq.n	8004f1e <_malloc_r+0xea>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	442b      	add	r3, r5
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	bb62      	cbnz	r2, 8004f10 <_malloc_r+0xdc>
 8004eb6:	f8c8 7000 	str.w	r7, [r8]
 8004eba:	e00f      	b.n	8004edc <_malloc_r+0xa8>
 8004ebc:	6822      	ldr	r2, [r4, #0]
 8004ebe:	1b52      	subs	r2, r2, r5
 8004ec0:	d420      	bmi.n	8004f04 <_malloc_r+0xd0>
 8004ec2:	2a0b      	cmp	r2, #11
 8004ec4:	d917      	bls.n	8004ef6 <_malloc_r+0xc2>
 8004ec6:	1961      	adds	r1, r4, r5
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	6025      	str	r5, [r4, #0]
 8004ecc:	bf18      	it	ne
 8004ece:	6059      	strne	r1, [r3, #4]
 8004ed0:	6863      	ldr	r3, [r4, #4]
 8004ed2:	bf08      	it	eq
 8004ed4:	f8c8 1000 	streq.w	r1, [r8]
 8004ed8:	5162      	str	r2, [r4, r5]
 8004eda:	604b      	str	r3, [r1, #4]
 8004edc:	4630      	mov	r0, r6
 8004ede:	f000 f82f 	bl	8004f40 <__malloc_unlock>
 8004ee2:	f104 000b 	add.w	r0, r4, #11
 8004ee6:	1d23      	adds	r3, r4, #4
 8004ee8:	f020 0007 	bic.w	r0, r0, #7
 8004eec:	1ac2      	subs	r2, r0, r3
 8004eee:	bf1c      	itt	ne
 8004ef0:	1a1b      	subne	r3, r3, r0
 8004ef2:	50a3      	strne	r3, [r4, r2]
 8004ef4:	e7af      	b.n	8004e56 <_malloc_r+0x22>
 8004ef6:	6862      	ldr	r2, [r4, #4]
 8004ef8:	42a3      	cmp	r3, r4
 8004efa:	bf0c      	ite	eq
 8004efc:	f8c8 2000 	streq.w	r2, [r8]
 8004f00:	605a      	strne	r2, [r3, #4]
 8004f02:	e7eb      	b.n	8004edc <_malloc_r+0xa8>
 8004f04:	4623      	mov	r3, r4
 8004f06:	6864      	ldr	r4, [r4, #4]
 8004f08:	e7ae      	b.n	8004e68 <_malloc_r+0x34>
 8004f0a:	463c      	mov	r4, r7
 8004f0c:	687f      	ldr	r7, [r7, #4]
 8004f0e:	e7b6      	b.n	8004e7e <_malloc_r+0x4a>
 8004f10:	461a      	mov	r2, r3
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	42a3      	cmp	r3, r4
 8004f16:	d1fb      	bne.n	8004f10 <_malloc_r+0xdc>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	6053      	str	r3, [r2, #4]
 8004f1c:	e7de      	b.n	8004edc <_malloc_r+0xa8>
 8004f1e:	230c      	movs	r3, #12
 8004f20:	6033      	str	r3, [r6, #0]
 8004f22:	4630      	mov	r0, r6
 8004f24:	f000 f80c 	bl	8004f40 <__malloc_unlock>
 8004f28:	e794      	b.n	8004e54 <_malloc_r+0x20>
 8004f2a:	6005      	str	r5, [r0, #0]
 8004f2c:	e7d6      	b.n	8004edc <_malloc_r+0xa8>
 8004f2e:	bf00      	nop
 8004f30:	20012fc4 	.word	0x20012fc4

08004f34 <__malloc_lock>:
 8004f34:	4801      	ldr	r0, [pc, #4]	@ (8004f3c <__malloc_lock+0x8>)
 8004f36:	f7ff bf00 	b.w	8004d3a <__retarget_lock_acquire_recursive>
 8004f3a:	bf00      	nop
 8004f3c:	20012fbc 	.word	0x20012fbc

08004f40 <__malloc_unlock>:
 8004f40:	4801      	ldr	r0, [pc, #4]	@ (8004f48 <__malloc_unlock+0x8>)
 8004f42:	f7ff befb 	b.w	8004d3c <__retarget_lock_release_recursive>
 8004f46:	bf00      	nop
 8004f48:	20012fbc 	.word	0x20012fbc

08004f4c <__sflush_r>:
 8004f4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f54:	0716      	lsls	r6, r2, #28
 8004f56:	4605      	mov	r5, r0
 8004f58:	460c      	mov	r4, r1
 8004f5a:	d454      	bmi.n	8005006 <__sflush_r+0xba>
 8004f5c:	684b      	ldr	r3, [r1, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	dc02      	bgt.n	8004f68 <__sflush_r+0x1c>
 8004f62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	dd48      	ble.n	8004ffa <__sflush_r+0xae>
 8004f68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f6a:	2e00      	cmp	r6, #0
 8004f6c:	d045      	beq.n	8004ffa <__sflush_r+0xae>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f74:	682f      	ldr	r7, [r5, #0]
 8004f76:	6a21      	ldr	r1, [r4, #32]
 8004f78:	602b      	str	r3, [r5, #0]
 8004f7a:	d030      	beq.n	8004fde <__sflush_r+0x92>
 8004f7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	0759      	lsls	r1, r3, #29
 8004f82:	d505      	bpl.n	8004f90 <__sflush_r+0x44>
 8004f84:	6863      	ldr	r3, [r4, #4]
 8004f86:	1ad2      	subs	r2, r2, r3
 8004f88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f8a:	b10b      	cbz	r3, 8004f90 <__sflush_r+0x44>
 8004f8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f8e:	1ad2      	subs	r2, r2, r3
 8004f90:	2300      	movs	r3, #0
 8004f92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f94:	6a21      	ldr	r1, [r4, #32]
 8004f96:	4628      	mov	r0, r5
 8004f98:	47b0      	blx	r6
 8004f9a:	1c43      	adds	r3, r0, #1
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	d106      	bne.n	8004fae <__sflush_r+0x62>
 8004fa0:	6829      	ldr	r1, [r5, #0]
 8004fa2:	291d      	cmp	r1, #29
 8004fa4:	d82b      	bhi.n	8004ffe <__sflush_r+0xb2>
 8004fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8005050 <__sflush_r+0x104>)
 8004fa8:	40ca      	lsrs	r2, r1
 8004faa:	07d6      	lsls	r6, r2, #31
 8004fac:	d527      	bpl.n	8004ffe <__sflush_r+0xb2>
 8004fae:	2200      	movs	r2, #0
 8004fb0:	6062      	str	r2, [r4, #4]
 8004fb2:	04d9      	lsls	r1, r3, #19
 8004fb4:	6922      	ldr	r2, [r4, #16]
 8004fb6:	6022      	str	r2, [r4, #0]
 8004fb8:	d504      	bpl.n	8004fc4 <__sflush_r+0x78>
 8004fba:	1c42      	adds	r2, r0, #1
 8004fbc:	d101      	bne.n	8004fc2 <__sflush_r+0x76>
 8004fbe:	682b      	ldr	r3, [r5, #0]
 8004fc0:	b903      	cbnz	r3, 8004fc4 <__sflush_r+0x78>
 8004fc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fc6:	602f      	str	r7, [r5, #0]
 8004fc8:	b1b9      	cbz	r1, 8004ffa <__sflush_r+0xae>
 8004fca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fce:	4299      	cmp	r1, r3
 8004fd0:	d002      	beq.n	8004fd8 <__sflush_r+0x8c>
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f7ff fec2 	bl	8004d5c <_free_r>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fdc:	e00d      	b.n	8004ffa <__sflush_r+0xae>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	47b0      	blx	r6
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	1c50      	adds	r0, r2, #1
 8004fe8:	d1c9      	bne.n	8004f7e <__sflush_r+0x32>
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0c6      	beq.n	8004f7e <__sflush_r+0x32>
 8004ff0:	2b1d      	cmp	r3, #29
 8004ff2:	d001      	beq.n	8004ff8 <__sflush_r+0xac>
 8004ff4:	2b16      	cmp	r3, #22
 8004ff6:	d11e      	bne.n	8005036 <__sflush_r+0xea>
 8004ff8:	602f      	str	r7, [r5, #0]
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e022      	b.n	8005044 <__sflush_r+0xf8>
 8004ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005002:	b21b      	sxth	r3, r3
 8005004:	e01b      	b.n	800503e <__sflush_r+0xf2>
 8005006:	690f      	ldr	r7, [r1, #16]
 8005008:	2f00      	cmp	r7, #0
 800500a:	d0f6      	beq.n	8004ffa <__sflush_r+0xae>
 800500c:	0793      	lsls	r3, r2, #30
 800500e:	680e      	ldr	r6, [r1, #0]
 8005010:	bf08      	it	eq
 8005012:	694b      	ldreq	r3, [r1, #20]
 8005014:	600f      	str	r7, [r1, #0]
 8005016:	bf18      	it	ne
 8005018:	2300      	movne	r3, #0
 800501a:	eba6 0807 	sub.w	r8, r6, r7
 800501e:	608b      	str	r3, [r1, #8]
 8005020:	f1b8 0f00 	cmp.w	r8, #0
 8005024:	dde9      	ble.n	8004ffa <__sflush_r+0xae>
 8005026:	6a21      	ldr	r1, [r4, #32]
 8005028:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800502a:	4643      	mov	r3, r8
 800502c:	463a      	mov	r2, r7
 800502e:	4628      	mov	r0, r5
 8005030:	47b0      	blx	r6
 8005032:	2800      	cmp	r0, #0
 8005034:	dc08      	bgt.n	8005048 <__sflush_r+0xfc>
 8005036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800503a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800503e:	81a3      	strh	r3, [r4, #12]
 8005040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005048:	4407      	add	r7, r0
 800504a:	eba8 0800 	sub.w	r8, r8, r0
 800504e:	e7e7      	b.n	8005020 <__sflush_r+0xd4>
 8005050:	20400001 	.word	0x20400001

08005054 <_fflush_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	690b      	ldr	r3, [r1, #16]
 8005058:	4605      	mov	r5, r0
 800505a:	460c      	mov	r4, r1
 800505c:	b913      	cbnz	r3, 8005064 <_fflush_r+0x10>
 800505e:	2500      	movs	r5, #0
 8005060:	4628      	mov	r0, r5
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	b118      	cbz	r0, 800506e <_fflush_r+0x1a>
 8005066:	6a03      	ldr	r3, [r0, #32]
 8005068:	b90b      	cbnz	r3, 800506e <_fflush_r+0x1a>
 800506a:	f7ff fc87 	bl	800497c <__sinit>
 800506e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f3      	beq.n	800505e <_fflush_r+0xa>
 8005076:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005078:	07d0      	lsls	r0, r2, #31
 800507a:	d404      	bmi.n	8005086 <_fflush_r+0x32>
 800507c:	0599      	lsls	r1, r3, #22
 800507e:	d402      	bmi.n	8005086 <_fflush_r+0x32>
 8005080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005082:	f7ff fe5a 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8005086:	4628      	mov	r0, r5
 8005088:	4621      	mov	r1, r4
 800508a:	f7ff ff5f 	bl	8004f4c <__sflush_r>
 800508e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005090:	07da      	lsls	r2, r3, #31
 8005092:	4605      	mov	r5, r0
 8005094:	d4e4      	bmi.n	8005060 <_fflush_r+0xc>
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	059b      	lsls	r3, r3, #22
 800509a:	d4e1      	bmi.n	8005060 <_fflush_r+0xc>
 800509c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800509e:	f7ff fe4d 	bl	8004d3c <__retarget_lock_release_recursive>
 80050a2:	e7dd      	b.n	8005060 <_fflush_r+0xc>

080050a4 <__swhatbuf_r>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	460c      	mov	r4, r1
 80050a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ac:	2900      	cmp	r1, #0
 80050ae:	b096      	sub	sp, #88	@ 0x58
 80050b0:	4615      	mov	r5, r2
 80050b2:	461e      	mov	r6, r3
 80050b4:	da0d      	bge.n	80050d2 <__swhatbuf_r+0x2e>
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050bc:	f04f 0100 	mov.w	r1, #0
 80050c0:	bf14      	ite	ne
 80050c2:	2340      	movne	r3, #64	@ 0x40
 80050c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050c8:	2000      	movs	r0, #0
 80050ca:	6031      	str	r1, [r6, #0]
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	b016      	add	sp, #88	@ 0x58
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
 80050d2:	466a      	mov	r2, sp
 80050d4:	f000 f848 	bl	8005168 <_fstat_r>
 80050d8:	2800      	cmp	r0, #0
 80050da:	dbec      	blt.n	80050b6 <__swhatbuf_r+0x12>
 80050dc:	9901      	ldr	r1, [sp, #4]
 80050de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050e6:	4259      	negs	r1, r3
 80050e8:	4159      	adcs	r1, r3
 80050ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050ee:	e7eb      	b.n	80050c8 <__swhatbuf_r+0x24>

080050f0 <__smakebuf_r>:
 80050f0:	898b      	ldrh	r3, [r1, #12]
 80050f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050f4:	079d      	lsls	r5, r3, #30
 80050f6:	4606      	mov	r6, r0
 80050f8:	460c      	mov	r4, r1
 80050fa:	d507      	bpl.n	800510c <__smakebuf_r+0x1c>
 80050fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	6123      	str	r3, [r4, #16]
 8005104:	2301      	movs	r3, #1
 8005106:	6163      	str	r3, [r4, #20]
 8005108:	b003      	add	sp, #12
 800510a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800510c:	ab01      	add	r3, sp, #4
 800510e:	466a      	mov	r2, sp
 8005110:	f7ff ffc8 	bl	80050a4 <__swhatbuf_r>
 8005114:	9f00      	ldr	r7, [sp, #0]
 8005116:	4605      	mov	r5, r0
 8005118:	4639      	mov	r1, r7
 800511a:	4630      	mov	r0, r6
 800511c:	f7ff fe8a 	bl	8004e34 <_malloc_r>
 8005120:	b948      	cbnz	r0, 8005136 <__smakebuf_r+0x46>
 8005122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005126:	059a      	lsls	r2, r3, #22
 8005128:	d4ee      	bmi.n	8005108 <__smakebuf_r+0x18>
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	f043 0302 	orr.w	r3, r3, #2
 8005132:	81a3      	strh	r3, [r4, #12]
 8005134:	e7e2      	b.n	80050fc <__smakebuf_r+0xc>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	6020      	str	r0, [r4, #0]
 800513a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	9b01      	ldr	r3, [sp, #4]
 8005142:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005146:	b15b      	cbz	r3, 8005160 <__smakebuf_r+0x70>
 8005148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800514c:	4630      	mov	r0, r6
 800514e:	f000 f81d 	bl	800518c <_isatty_r>
 8005152:	b128      	cbz	r0, 8005160 <__smakebuf_r+0x70>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	81a3      	strh	r3, [r4, #12]
 8005160:	89a3      	ldrh	r3, [r4, #12]
 8005162:	431d      	orrs	r5, r3
 8005164:	81a5      	strh	r5, [r4, #12]
 8005166:	e7cf      	b.n	8005108 <__smakebuf_r+0x18>

08005168 <_fstat_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d07      	ldr	r5, [pc, #28]	@ (8005188 <_fstat_r+0x20>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	f7fb fd64 	bl	8000c42 <_fstat>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d102      	bne.n	8005184 <_fstat_r+0x1c>
 800517e:	682b      	ldr	r3, [r5, #0]
 8005180:	b103      	cbz	r3, 8005184 <_fstat_r+0x1c>
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	bd38      	pop	{r3, r4, r5, pc}
 8005186:	bf00      	nop
 8005188:	20012fb8 	.word	0x20012fb8

0800518c <_isatty_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4d06      	ldr	r5, [pc, #24]	@ (80051a8 <_isatty_r+0x1c>)
 8005190:	2300      	movs	r3, #0
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	602b      	str	r3, [r5, #0]
 8005198:	f7fb fd63 	bl	8000c62 <_isatty>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_isatty_r+0x1a>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_isatty_r+0x1a>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	20012fb8 	.word	0x20012fb8

080051ac <_sbrk_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d06      	ldr	r5, [pc, #24]	@ (80051c8 <_sbrk_r+0x1c>)
 80051b0:	2300      	movs	r3, #0
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
 80051b6:	602b      	str	r3, [r5, #0]
 80051b8:	f000 f808 	bl	80051cc <_sbrk>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_sbrk_r+0x1a>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_sbrk_r+0x1a>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	20012fb8 	.word	0x20012fb8

080051cc <_sbrk>:
 80051cc:	4a04      	ldr	r2, [pc, #16]	@ (80051e0 <_sbrk+0x14>)
 80051ce:	6811      	ldr	r1, [r2, #0]
 80051d0:	4603      	mov	r3, r0
 80051d2:	b909      	cbnz	r1, 80051d8 <_sbrk+0xc>
 80051d4:	4903      	ldr	r1, [pc, #12]	@ (80051e4 <_sbrk+0x18>)
 80051d6:	6011      	str	r1, [r2, #0]
 80051d8:	6810      	ldr	r0, [r2, #0]
 80051da:	4403      	add	r3, r0
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	4770      	bx	lr
 80051e0:	20012fc8 	.word	0x20012fc8
 80051e4:	20012fd0 	.word	0x20012fd0

080051e8 <_init>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	bf00      	nop
 80051ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ee:	bc08      	pop	{r3}
 80051f0:	469e      	mov	lr, r3
 80051f2:	4770      	bx	lr

080051f4 <_fini>:
 80051f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f6:	bf00      	nop
 80051f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fa:	bc08      	pop	{r3}
 80051fc:	469e      	mov	lr, r3
 80051fe:	4770      	bx	lr
